// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Lnrpc_CreateWalletRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateWalletRequest"

  var password: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.password)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.password.isEmpty {
      try visitor.visitSingularBytesField(value: self.password, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_CreateWalletResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CreateWalletResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_UnlockWalletRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".UnlockWalletRequest"

  var password: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.password)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.password.isEmpty {
      try visitor.visitSingularBytesField(value: self.password, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_UnlockWalletResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".UnlockWalletResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_Transaction: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Transaction"

  //// The transaction hash
  var txHash: String = String()

  //// The transaction ammount, denominated in satoshis
  var amount: Int64 = 0

  //// The number of confirmations
  var numConfirmations: Int32 = 0

  //// The hash of the block this transaction was included in
  var blockHash: String = String()

  //// The height of the block this transaction was included in
  var blockHeight: Int32 = 0

  //// Timestamp of this transaction 
  var timeStamp: Int64 = 0

  //// Fees paid for this transaction
  var totalFees: Int64 = 0

  //// Addresses that received funds for this transaction
  var destAddresses: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.txHash)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 3: try decoder.decodeSingularInt32Field(value: &self.numConfirmations)
      case 4: try decoder.decodeSingularStringField(value: &self.blockHash)
      case 5: try decoder.decodeSingularInt32Field(value: &self.blockHeight)
      case 6: try decoder.decodeSingularInt64Field(value: &self.timeStamp)
      case 7: try decoder.decodeSingularInt64Field(value: &self.totalFees)
      case 8: try decoder.decodeRepeatedStringField(value: &self.destAddresses)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if self.numConfirmations != 0 {
      try visitor.visitSingularInt32Field(value: self.numConfirmations, fieldNumber: 3)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.blockHash, fieldNumber: 4)
    }
    if self.blockHeight != 0 {
      try visitor.visitSingularInt32Field(value: self.blockHeight, fieldNumber: 5)
    }
    if self.timeStamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timeStamp, fieldNumber: 6)
    }
    if self.totalFees != 0 {
      try visitor.visitSingularInt64Field(value: self.totalFees, fieldNumber: 7)
    }
    if !self.destAddresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.destAddresses, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_GetTransactionsRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetTransactionsRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_TransactionDetails: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TransactionDetails"

  //// The list of transactions relevant to the wallet.
  var transactions: [Lnrpc_Transaction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.transactions)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transactions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transactions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_SendRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SendRequest"

  //// The identity pubkey of the payment recipient
  var dest: Data = SwiftProtobuf.Internal.emptyData

  //// The hex-encoded identity pubkey of the payment recipient
  var destString: String = String()

  //// Number of satoshis to send. 
  var amt: Int64 = 0

  //// The hash to use within the payment's HTLC
  var paymentHash: Data = SwiftProtobuf.Internal.emptyData

  //// The hex-encoded hash to use within the payment's HTLC
  var paymentHashString: String = String()

  ///*
  ///A bare-bones invoice for a payment within the Lightning Network.  With the
  ///details of the invoice, the sender has all the data necessary to send a
  ///payment to the recipient.
  var paymentRequest: String = String()

  //// The CLTV delta from the current height that should be used to set the timelock for the final hop.
  var finalCltvDelta: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.dest)
      case 2: try decoder.decodeSingularStringField(value: &self.destString)
      case 3: try decoder.decodeSingularInt64Field(value: &self.amt)
      case 4: try decoder.decodeSingularBytesField(value: &self.paymentHash)
      case 5: try decoder.decodeSingularStringField(value: &self.paymentHashString)
      case 6: try decoder.decodeSingularStringField(value: &self.paymentRequest)
      case 7: try decoder.decodeSingularInt32Field(value: &self.finalCltvDelta)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dest.isEmpty {
      try visitor.visitSingularBytesField(value: self.dest, fieldNumber: 1)
    }
    if !self.destString.isEmpty {
      try visitor.visitSingularStringField(value: self.destString, fieldNumber: 2)
    }
    if self.amt != 0 {
      try visitor.visitSingularInt64Field(value: self.amt, fieldNumber: 3)
    }
    if !self.paymentHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.paymentHash, fieldNumber: 4)
    }
    if !self.paymentHashString.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentHashString, fieldNumber: 5)
    }
    if !self.paymentRequest.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentRequest, fieldNumber: 6)
    }
    if self.finalCltvDelta != 0 {
      try visitor.visitSingularInt32Field(value: self.finalCltvDelta, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_SendResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SendResponse"

  var paymentError: String {
    get {return _storage._paymentError}
    set {_uniqueStorage()._paymentError = newValue}
  }

  var paymentPreimage: Data {
    get {return _storage._paymentPreimage}
    set {_uniqueStorage()._paymentPreimage = newValue}
  }

  var paymentRoute: Lnrpc_Route {
    get {return _storage._paymentRoute ?? Lnrpc_Route()}
    set {_uniqueStorage()._paymentRoute = newValue}
  }
  /// Returns true if `paymentRoute` has been explicitly set.
  var hasPaymentRoute: Bool {return _storage._paymentRoute != nil}
  /// Clears the value of `paymentRoute`. Subsequent reads from it will return its default value.
  mutating func clearPaymentRoute() {_storage._paymentRoute = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._paymentError)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._paymentPreimage)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._paymentRoute)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._paymentError.isEmpty {
        try visitor.visitSingularStringField(value: _storage._paymentError, fieldNumber: 1)
      }
      if !_storage._paymentPreimage.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._paymentPreimage, fieldNumber: 2)
      }
      if let v = _storage._paymentRoute {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_ChannelPoint: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelPoint"

  var fundingTxid: Lnrpc_ChannelPoint.OneOf_FundingTxid? = nil

  //// Txid of the funding transaction
  var fundingTxidBytes: Data {
    get {
      if case .fundingTxidBytes(let v)? = fundingTxid {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {fundingTxid = .fundingTxidBytes(newValue)}
  }

  //// Hex-encoded string representing the funding transaction
  var fundingTxidStr: String {
    get {
      if case .fundingTxidStr(let v)? = fundingTxid {return v}
      return String()
    }
    set {fundingTxid = .fundingTxidStr(newValue)}
  }

  //// The index of the output of the funding transaction
  var outputIndex: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_FundingTxid: Equatable {
    //// Txid of the funding transaction
    case fundingTxidBytes(Data)
    //// Hex-encoded string representing the funding transaction
    case fundingTxidStr(String)

    static func ==(lhs: Lnrpc_ChannelPoint.OneOf_FundingTxid, rhs: Lnrpc_ChannelPoint.OneOf_FundingTxid) -> Bool {
      switch (lhs, rhs) {
      case (.fundingTxidBytes(let l), .fundingTxidBytes(let r)): return l == r
      case (.fundingTxidStr(let l), .fundingTxidStr(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.fundingTxid != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.fundingTxid = .fundingTxidBytes(v)}
      case 2:
        if self.fundingTxid != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.fundingTxid = .fundingTxidStr(v)}
      case 3: try decoder.decodeSingularUInt32Field(value: &self.outputIndex)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.fundingTxid {
    case .fundingTxidBytes(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    case .fundingTxidStr(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case nil: break
    }
    if self.outputIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.outputIndex, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_LightningAddress: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LightningAddress"

  //// The identity pubkey of the Lightning node
  var pubkey: String = String()

  //// The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
  var host: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pubkey)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubkey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubkey, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_SendManyRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SendManyRequest"

  //// The map from addresses to amounts
  var addrToAmount: Dictionary<String,Int64> = [:]

  //// The target number of blocks that this transaction should be confirmed by.
  var targetConf: Int32 = 0

  //// A manual fee rate set in sat/byte that should be used when crafting the transaction.
  var satPerByte: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: &self.addrToAmount)
      case 3: try decoder.decodeSingularInt32Field(value: &self.targetConf)
      case 5: try decoder.decodeSingularInt64Field(value: &self.satPerByte)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addrToAmount.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: self.addrToAmount, fieldNumber: 1)
    }
    if self.targetConf != 0 {
      try visitor.visitSingularInt32Field(value: self.targetConf, fieldNumber: 3)
    }
    if self.satPerByte != 0 {
      try visitor.visitSingularInt64Field(value: self.satPerByte, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_SendManyResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SendManyResponse"

  //// The id of the transaction
  var txid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.txid)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txid.isEmpty {
      try visitor.visitSingularStringField(value: self.txid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_SendCoinsRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SendCoinsRequest"

  //// The address to send coins to 
  var addr: String = String()

  //// The amount in satoshis to send
  var amount: Int64 = 0

  //// The target number of blocks that this transaction should be confirmed by.
  var targetConf: Int32 = 0

  //// A manual fee rate set in sat/byte that should be used when crafting the transaction.
  var satPerByte: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.addr)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 3: try decoder.decodeSingularInt32Field(value: &self.targetConf)
      case 5: try decoder.decodeSingularInt64Field(value: &self.satPerByte)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addr.isEmpty {
      try visitor.visitSingularStringField(value: self.addr, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if self.targetConf != 0 {
      try visitor.visitSingularInt32Field(value: self.targetConf, fieldNumber: 3)
    }
    if self.satPerByte != 0 {
      try visitor.visitSingularInt64Field(value: self.satPerByte, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_SendCoinsResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SendCoinsResponse"

  //// The transaction ID of the transaction
  var txid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.txid)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txid.isEmpty {
      try visitor.visitSingularStringField(value: self.txid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 
///`AddressType` has to be one of:
///
///- `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)
///- `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)
///- `p2pkh`:  Pay to public key hash (`PUBKEY_HASH` = 2)
struct Lnrpc_NewAddressRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NewAddressRequest"

  //// The address type
  var type: Lnrpc_NewAddressRequest.AddressType = .witnessPubkeyHash

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum AddressType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case witnessPubkeyHash // = 0
    case nestedPubkeyHash // = 1
    case pubkeyHash // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .witnessPubkeyHash
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .witnessPubkeyHash
      case 1: self = .nestedPubkeyHash
      case 2: self = .pubkeyHash
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .witnessPubkeyHash: return 0
      case .nestedPubkeyHash: return 1
      case .pubkeyHash: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .witnessPubkeyHash {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_NewWitnessAddressRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NewWitnessAddressRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_NewAddressResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NewAddressResponse"

  //// The newly generated wallet address
  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.address)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_SignMessageRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SignMessageRequest"

  //// The message to be signed
  var msg: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.msg)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_SignMessageResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SignMessageResponse"

  //// The signature for the given message
  var signature: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.signature)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_VerifyMessageRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".VerifyMessageRequest"

  //// The message over which the signature is to be verified
  var msg: Data = SwiftProtobuf.Internal.emptyData

  //// The signature to be verified over the given message
  var signature: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.msg)
      case 2: try decoder.decodeSingularStringField(value: &self.signature)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_VerifyMessageResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".VerifyMessageResponse"

  //// Whether the signature was valid over the given message
  var valid: Bool = false

  //// The pubkey recovered from the signature
  var pubkey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.valid)
      case 2: try decoder.decodeSingularStringField(value: &self.pubkey)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.valid != false {
      try visitor.visitSingularBoolField(value: self.valid, fieldNumber: 1)
    }
    if !self.pubkey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubkey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ConnectPeerRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ConnectPeerRequest"

  //// Lightning address of the peer, in the format `<pubkey>@host`
  var addr: Lnrpc_LightningAddress {
    get {return _storage._addr ?? Lnrpc_LightningAddress()}
    set {_uniqueStorage()._addr = newValue}
  }
  /// Returns true if `addr` has been explicitly set.
  var hasAddr: Bool {return _storage._addr != nil}
  /// Clears the value of `addr`. Subsequent reads from it will return its default value.
  mutating func clearAddr() {_storage._addr = nil}

  ///* If set, the daemon will attempt to persistently connect to the target
  /// peer.  Otherwise, the call will be synchronous. 
  var perm: Bool {
    get {return _storage._perm}
    set {_uniqueStorage()._perm = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._addr)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._perm)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._addr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._perm != false {
        try visitor.visitSingularBoolField(value: _storage._perm, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_ConnectPeerResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ConnectPeerResponse"

  //// The id of the newly connected peer
  var peerID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.peerID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.peerID != 0 {
      try visitor.visitSingularInt32Field(value: self.peerID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_DisconnectPeerRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DisconnectPeerRequest"

  //// The pubkey of the node to disconnect from
  var pubKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pubKey)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_DisconnectPeerResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DisconnectPeerResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_HTLC: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".HTLC"

  var incoming: Bool = false

  var amount: Int64 = 0

  var hashLock: Data = SwiftProtobuf.Internal.emptyData

  var expirationHeight: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.incoming)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 3: try decoder.decodeSingularBytesField(value: &self.hashLock)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.expirationHeight)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.incoming != false {
      try visitor.visitSingularBoolField(value: self.incoming, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if !self.hashLock.isEmpty {
      try visitor.visitSingularBytesField(value: self.hashLock, fieldNumber: 3)
    }
    if self.expirationHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.expirationHeight, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ActiveChannel: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ActiveChannel"

  //// Whether this channel is active or not
  var active: Bool = false

  //// The identity pubkey of the remote node
  var remotePubkey: String = String()

  ///*
  ///The outpoint (txid:index) of the funding transaction. With this value, Bob
  ///will be able to generate a signature for Alice's version of the commitment
  ///transaction.
  var channelPoint: String = String()

  ///*
  ///The unique channel ID for the channel. The first 3 bytes are the block
  ///height, the next 3 the index within the block, and the last 2 bytes are the
  ///output index for the channel.
  var chanID: UInt64 = 0

  //// The total amount of funds held in this channel
  var capacity: Int64 = 0

  //// This node's current balance in this channel
  var localBalance: Int64 = 0

  //// The counterparty's current balance in this channel
  var remoteBalance: Int64 = 0

  ///*
  ///The amount calculated to be paid in fees for the current set of commitment
  ///transactions. The fee amount is persisted with the channel in order to
  ///allow the fee amount to be removed and recalculated with each channel state
  ///update, including updates that happen after a system restart.
  var commitFee: Int64 = 0

  //// The weight of the commitment transaction
  var commitWeight: Int64 = 0

  ///*
  ///The required number of satoshis per kilo-weight that the requester will pay
  ///at all times, for both the funding transaction and commitment transaction.
  ///This value can later be updated once the channel is open.
  var feePerKw: Int64 = 0

  //// The unsettled balance in this channel
  var unsettledBalance: Int64 = 0

  ///*
  ///The total number of satoshis we've sent within this channel.
  var totalSatoshisSent: Int64 = 0

  ///*
  ///The total number of satoshis we've received within this channel.
  var totalSatoshisReceived: Int64 = 0

  ///*
  ///The total number of updates conducted within this channel.
  var numUpdates: UInt64 = 0

  ///*
  ///The list of active, uncleared HTLCs currently pending within the channel.
  var pendingHtlcs: [Lnrpc_HTLC] = []

  ///*
  ///The CSV delay expressed in relative blocks. If the channel is force
  ///closed, we'll need to wait for this many blocks before we can regain our
  ///funds.
  var csvDelay: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.active)
      case 2: try decoder.decodeSingularStringField(value: &self.remotePubkey)
      case 3: try decoder.decodeSingularStringField(value: &self.channelPoint)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.chanID)
      case 5: try decoder.decodeSingularInt64Field(value: &self.capacity)
      case 6: try decoder.decodeSingularInt64Field(value: &self.localBalance)
      case 7: try decoder.decodeSingularInt64Field(value: &self.remoteBalance)
      case 8: try decoder.decodeSingularInt64Field(value: &self.commitFee)
      case 9: try decoder.decodeSingularInt64Field(value: &self.commitWeight)
      case 10: try decoder.decodeSingularInt64Field(value: &self.feePerKw)
      case 11: try decoder.decodeSingularInt64Field(value: &self.unsettledBalance)
      case 12: try decoder.decodeSingularInt64Field(value: &self.totalSatoshisSent)
      case 13: try decoder.decodeSingularInt64Field(value: &self.totalSatoshisReceived)
      case 14: try decoder.decodeSingularUInt64Field(value: &self.numUpdates)
      case 15: try decoder.decodeRepeatedMessageField(value: &self.pendingHtlcs)
      case 16: try decoder.decodeSingularUInt32Field(value: &self.csvDelay)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 1)
    }
    if !self.remotePubkey.isEmpty {
      try visitor.visitSingularStringField(value: self.remotePubkey, fieldNumber: 2)
    }
    if !self.channelPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.channelPoint, fieldNumber: 3)
    }
    if self.chanID != 0 {
      try visitor.visitSingularUInt64Field(value: self.chanID, fieldNumber: 4)
    }
    if self.capacity != 0 {
      try visitor.visitSingularInt64Field(value: self.capacity, fieldNumber: 5)
    }
    if self.localBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.localBalance, fieldNumber: 6)
    }
    if self.remoteBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.remoteBalance, fieldNumber: 7)
    }
    if self.commitFee != 0 {
      try visitor.visitSingularInt64Field(value: self.commitFee, fieldNumber: 8)
    }
    if self.commitWeight != 0 {
      try visitor.visitSingularInt64Field(value: self.commitWeight, fieldNumber: 9)
    }
    if self.feePerKw != 0 {
      try visitor.visitSingularInt64Field(value: self.feePerKw, fieldNumber: 10)
    }
    if self.unsettledBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.unsettledBalance, fieldNumber: 11)
    }
    if self.totalSatoshisSent != 0 {
      try visitor.visitSingularInt64Field(value: self.totalSatoshisSent, fieldNumber: 12)
    }
    if self.totalSatoshisReceived != 0 {
      try visitor.visitSingularInt64Field(value: self.totalSatoshisReceived, fieldNumber: 13)
    }
    if self.numUpdates != 0 {
      try visitor.visitSingularUInt64Field(value: self.numUpdates, fieldNumber: 14)
    }
    if !self.pendingHtlcs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pendingHtlcs, fieldNumber: 15)
    }
    if self.csvDelay != 0 {
      try visitor.visitSingularUInt32Field(value: self.csvDelay, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ListChannelsRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListChannelsRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ListChannelsResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListChannelsResponse"

  //// The list of active channels
  var channels: [Lnrpc_ActiveChannel] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 11: try decoder.decodeRepeatedMessageField(value: &self.channels)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.channels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.channels, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_Peer: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Peer"

  //// The identity pubkey of the peer
  var pubKey: String = String()

  //// The peer's id from the local point of view
  var peerID: Int32 = 0

  //// Network address of the peer; eg `127.0.0.1:10011`
  var address: String = String()

  //// Bytes of data transmitted to this peer
  var bytesSent: UInt64 = 0

  //// Bytes of data transmitted from this peer
  var bytesRecv: UInt64 = 0

  //// Satoshis sent to this peer
  var satSent: Int64 = 0

  //// Satoshis received from this peer
  var satRecv: Int64 = 0

  //// A channel is inbound if the counterparty initiated the channel
  var inbound: Bool = false

  //// Ping time to this peer
  var pingTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pubKey)
      case 2: try decoder.decodeSingularInt32Field(value: &self.peerID)
      case 3: try decoder.decodeSingularStringField(value: &self.address)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.bytesSent)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.bytesRecv)
      case 6: try decoder.decodeSingularInt64Field(value: &self.satSent)
      case 7: try decoder.decodeSingularInt64Field(value: &self.satRecv)
      case 8: try decoder.decodeSingularBoolField(value: &self.inbound)
      case 9: try decoder.decodeSingularInt64Field(value: &self.pingTime)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubKey, fieldNumber: 1)
    }
    if self.peerID != 0 {
      try visitor.visitSingularInt32Field(value: self.peerID, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if self.bytesSent != 0 {
      try visitor.visitSingularUInt64Field(value: self.bytesSent, fieldNumber: 4)
    }
    if self.bytesRecv != 0 {
      try visitor.visitSingularUInt64Field(value: self.bytesRecv, fieldNumber: 5)
    }
    if self.satSent != 0 {
      try visitor.visitSingularInt64Field(value: self.satSent, fieldNumber: 6)
    }
    if self.satRecv != 0 {
      try visitor.visitSingularInt64Field(value: self.satRecv, fieldNumber: 7)
    }
    if self.inbound != false {
      try visitor.visitSingularBoolField(value: self.inbound, fieldNumber: 8)
    }
    if self.pingTime != 0 {
      try visitor.visitSingularInt64Field(value: self.pingTime, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ListPeersRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListPeersRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ListPeersResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListPeersResponse"

  //// The list of currently connected peers
  var peers: [Lnrpc_Peer] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.peers)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.peers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_GetInfoRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetInfoRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_GetInfoResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GetInfoResponse"

  //// The identity pubkey of the current node.
  var identityPubkey: String = String()

  //// If applicable, the alias of the current node, e.g. "bob"
  var alias: String = String()

  //// Number of pending channels
  var numPendingChannels: UInt32 = 0

  //// Number of active channels
  var numActiveChannels: UInt32 = 0

  //// Number of peers
  var numPeers: UInt32 = 0

  //// The node's current view of the height of the best block
  var blockHeight: UInt32 = 0

  //// The node's current view of the hash of the best block
  var blockHash: String = String()

  //// Whether the wallet's view is synced to the main chain
  var syncedToChain: Bool = false

  //// Whether the current node is connected to testnet
  var testnet: Bool = false

  //// A list of active chains the node is connected to
  var chains: [String] = []

  //// The URIs of the current node.
  var uris: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.identityPubkey)
      case 2: try decoder.decodeSingularStringField(value: &self.alias)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.numPendingChannels)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.numActiveChannels)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.numPeers)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.blockHeight)
      case 8: try decoder.decodeSingularStringField(value: &self.blockHash)
      case 9: try decoder.decodeSingularBoolField(value: &self.syncedToChain)
      case 10: try decoder.decodeSingularBoolField(value: &self.testnet)
      case 11: try decoder.decodeRepeatedStringField(value: &self.chains)
      case 12: try decoder.decodeRepeatedStringField(value: &self.uris)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityPubkey.isEmpty {
      try visitor.visitSingularStringField(value: self.identityPubkey, fieldNumber: 1)
    }
    if !self.alias.isEmpty {
      try visitor.visitSingularStringField(value: self.alias, fieldNumber: 2)
    }
    if self.numPendingChannels != 0 {
      try visitor.visitSingularUInt32Field(value: self.numPendingChannels, fieldNumber: 3)
    }
    if self.numActiveChannels != 0 {
      try visitor.visitSingularUInt32Field(value: self.numActiveChannels, fieldNumber: 4)
    }
    if self.numPeers != 0 {
      try visitor.visitSingularUInt32Field(value: self.numPeers, fieldNumber: 5)
    }
    if self.blockHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.blockHeight, fieldNumber: 6)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.blockHash, fieldNumber: 8)
    }
    if self.syncedToChain != false {
      try visitor.visitSingularBoolField(value: self.syncedToChain, fieldNumber: 9)
    }
    if self.testnet != false {
      try visitor.visitSingularBoolField(value: self.testnet, fieldNumber: 10)
    }
    if !self.chains.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chains, fieldNumber: 11)
    }
    if !self.uris.isEmpty {
      try visitor.visitRepeatedStringField(value: self.uris, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ConfirmationUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ConfirmationUpdate"

  var blockSha: Data = SwiftProtobuf.Internal.emptyData

  var blockHeight: Int32 = 0

  var numConfsLeft: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.blockSha)
      case 2: try decoder.decodeSingularInt32Field(value: &self.blockHeight)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.numConfsLeft)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockSha.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockSha, fieldNumber: 1)
    }
    if self.blockHeight != 0 {
      try visitor.visitSingularInt32Field(value: self.blockHeight, fieldNumber: 2)
    }
    if self.numConfsLeft != 0 {
      try visitor.visitSingularUInt32Field(value: self.numConfsLeft, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ChannelOpenUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelOpenUpdate"

  var channelPoint: Lnrpc_ChannelPoint {
    get {return _storage._channelPoint ?? Lnrpc_ChannelPoint()}
    set {_uniqueStorage()._channelPoint = newValue}
  }
  /// Returns true if `channelPoint` has been explicitly set.
  var hasChannelPoint: Bool {return _storage._channelPoint != nil}
  /// Clears the value of `channelPoint`. Subsequent reads from it will return its default value.
  mutating func clearChannelPoint() {_storage._channelPoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._channelPoint)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channelPoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_ChannelCloseUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelCloseUpdate"

  var closingTxid: Data = SwiftProtobuf.Internal.emptyData

  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.closingTxid)
      case 2: try decoder.decodeSingularBoolField(value: &self.success)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.closingTxid.isEmpty {
      try visitor.visitSingularBytesField(value: self.closingTxid, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_CloseChannelRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CloseChannelRequest"

  ///*
  ///The outpoint (txid:index) of the funding transaction. With this value, Bob
  ///will be able to generate a signature for Alice's version of the commitment
  ///transaction.
  var channelPoint: Lnrpc_ChannelPoint {
    get {return _storage._channelPoint ?? Lnrpc_ChannelPoint()}
    set {_uniqueStorage()._channelPoint = newValue}
  }
  /// Returns true if `channelPoint` has been explicitly set.
  var hasChannelPoint: Bool {return _storage._channelPoint != nil}
  /// Clears the value of `channelPoint`. Subsequent reads from it will return its default value.
  mutating func clearChannelPoint() {_storage._channelPoint = nil}

  //// If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
  var force: Bool {
    get {return _storage._force}
    set {_uniqueStorage()._force = newValue}
  }

  //// The target number of blocks that the closure transaction should be confirmed by.
  var targetConf: Int32 {
    get {return _storage._targetConf}
    set {_uniqueStorage()._targetConf = newValue}
  }

  //// A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
  var satPerByte: Int64 {
    get {return _storage._satPerByte}
    set {_uniqueStorage()._satPerByte = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._channelPoint)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._force)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._targetConf)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._satPerByte)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channelPoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._force != false {
        try visitor.visitSingularBoolField(value: _storage._force, fieldNumber: 2)
      }
      if _storage._targetConf != 0 {
        try visitor.visitSingularInt32Field(value: _storage._targetConf, fieldNumber: 3)
      }
      if _storage._satPerByte != 0 {
        try visitor.visitSingularInt64Field(value: _storage._satPerByte, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_CloseStatusUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CloseStatusUpdate"

  var update: OneOf_Update? {
    get {return _storage._update}
    set {_uniqueStorage()._update = newValue}
  }

  var closePending: Lnrpc_PendingUpdate {
    get {
      if case .closePending(let v)? = _storage._update {return v}
      return Lnrpc_PendingUpdate()
    }
    set {_uniqueStorage()._update = .closePending(newValue)}
  }

  var confirmation: Lnrpc_ConfirmationUpdate {
    get {
      if case .confirmation(let v)? = _storage._update {return v}
      return Lnrpc_ConfirmationUpdate()
    }
    set {_uniqueStorage()._update = .confirmation(newValue)}
  }

  var chanClose: Lnrpc_ChannelCloseUpdate {
    get {
      if case .chanClose(let v)? = _storage._update {return v}
      return Lnrpc_ChannelCloseUpdate()
    }
    set {_uniqueStorage()._update = .chanClose(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Update: Equatable {
    case closePending(Lnrpc_PendingUpdate)
    case confirmation(Lnrpc_ConfirmationUpdate)
    case chanClose(Lnrpc_ChannelCloseUpdate)

    static func ==(lhs: Lnrpc_CloseStatusUpdate.OneOf_Update, rhs: Lnrpc_CloseStatusUpdate.OneOf_Update) -> Bool {
      switch (lhs, rhs) {
      case (.closePending(let l), .closePending(let r)): return l == r
      case (.confirmation(let l), .confirmation(let r)): return l == r
      case (.chanClose(let l), .chanClose(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Lnrpc_PendingUpdate?
          if let current = _storage._update {
            try decoder.handleConflictingOneOf()
            if case .closePending(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._update = .closePending(v)}
        case 2:
          var v: Lnrpc_ConfirmationUpdate?
          if let current = _storage._update {
            try decoder.handleConflictingOneOf()
            if case .confirmation(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._update = .confirmation(v)}
        case 3:
          var v: Lnrpc_ChannelCloseUpdate?
          if let current = _storage._update {
            try decoder.handleConflictingOneOf()
            if case .chanClose(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._update = .chanClose(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._update {
      case .closePending(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .confirmation(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .chanClose(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_PendingUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PendingUpdate"

  var txid: Data = SwiftProtobuf.Internal.emptyData

  var outputIndex: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.txid)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.outputIndex)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txid.isEmpty {
      try visitor.visitSingularBytesField(value: self.txid, fieldNumber: 1)
    }
    if self.outputIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.outputIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_OpenChannelRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".OpenChannelRequest"

  //// The peer_id of the node to open a channel with
  var targetPeerID: Int32 = 0

  //// The pubkey of the node to open a channel with
  var nodePubkey: Data = SwiftProtobuf.Internal.emptyData

  //// The hex encoded pubkey of the node to open a channel with 
  var nodePubkeyString: String = String()

  //// The number of satoshis the wallet should commit to the channel
  var localFundingAmount: Int64 = 0

  //// The number of satoshis to push to the remote side as part of the initial commitment state
  var pushSat: Int64 = 0

  //// The target number of blocks that the closure transaction should be confirmed by.
  var targetConf: Int32 = 0

  //// A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
  var satPerByte: Int64 = 0

  //// Whether this channel should be private, not announced to the greater network.
  var `private`: Bool = false

  //// The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
  var minHtlcMsat: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.targetPeerID)
      case 2: try decoder.decodeSingularBytesField(value: &self.nodePubkey)
      case 3: try decoder.decodeSingularStringField(value: &self.nodePubkeyString)
      case 4: try decoder.decodeSingularInt64Field(value: &self.localFundingAmount)
      case 5: try decoder.decodeSingularInt64Field(value: &self.pushSat)
      case 6: try decoder.decodeSingularInt32Field(value: &self.targetConf)
      case 7: try decoder.decodeSingularInt64Field(value: &self.satPerByte)
      case 8: try decoder.decodeSingularBoolField(value: &self.`private`)
      case 9: try decoder.decodeSingularInt64Field(value: &self.minHtlcMsat)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.targetPeerID != 0 {
      try visitor.visitSingularInt32Field(value: self.targetPeerID, fieldNumber: 1)
    }
    if !self.nodePubkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodePubkey, fieldNumber: 2)
    }
    if !self.nodePubkeyString.isEmpty {
      try visitor.visitSingularStringField(value: self.nodePubkeyString, fieldNumber: 3)
    }
    if self.localFundingAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.localFundingAmount, fieldNumber: 4)
    }
    if self.pushSat != 0 {
      try visitor.visitSingularInt64Field(value: self.pushSat, fieldNumber: 5)
    }
    if self.targetConf != 0 {
      try visitor.visitSingularInt32Field(value: self.targetConf, fieldNumber: 6)
    }
    if self.satPerByte != 0 {
      try visitor.visitSingularInt64Field(value: self.satPerByte, fieldNumber: 7)
    }
    if self.`private` != false {
      try visitor.visitSingularBoolField(value: self.`private`, fieldNumber: 8)
    }
    if self.minHtlcMsat != 0 {
      try visitor.visitSingularInt64Field(value: self.minHtlcMsat, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_OpenStatusUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".OpenStatusUpdate"

  var update: OneOf_Update? {
    get {return _storage._update}
    set {_uniqueStorage()._update = newValue}
  }

  var chanPending: Lnrpc_PendingUpdate {
    get {
      if case .chanPending(let v)? = _storage._update {return v}
      return Lnrpc_PendingUpdate()
    }
    set {_uniqueStorage()._update = .chanPending(newValue)}
  }

  var confirmation: Lnrpc_ConfirmationUpdate {
    get {
      if case .confirmation(let v)? = _storage._update {return v}
      return Lnrpc_ConfirmationUpdate()
    }
    set {_uniqueStorage()._update = .confirmation(newValue)}
  }

  var chanOpen: Lnrpc_ChannelOpenUpdate {
    get {
      if case .chanOpen(let v)? = _storage._update {return v}
      return Lnrpc_ChannelOpenUpdate()
    }
    set {_uniqueStorage()._update = .chanOpen(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Update: Equatable {
    case chanPending(Lnrpc_PendingUpdate)
    case confirmation(Lnrpc_ConfirmationUpdate)
    case chanOpen(Lnrpc_ChannelOpenUpdate)

    static func ==(lhs: Lnrpc_OpenStatusUpdate.OneOf_Update, rhs: Lnrpc_OpenStatusUpdate.OneOf_Update) -> Bool {
      switch (lhs, rhs) {
      case (.chanPending(let l), .chanPending(let r)): return l == r
      case (.confirmation(let l), .confirmation(let r)): return l == r
      case (.chanOpen(let l), .chanOpen(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Lnrpc_PendingUpdate?
          if let current = _storage._update {
            try decoder.handleConflictingOneOf()
            if case .chanPending(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._update = .chanPending(v)}
        case 2:
          var v: Lnrpc_ConfirmationUpdate?
          if let current = _storage._update {
            try decoder.handleConflictingOneOf()
            if case .confirmation(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._update = .confirmation(v)}
        case 3:
          var v: Lnrpc_ChannelOpenUpdate?
          if let current = _storage._update {
            try decoder.handleConflictingOneOf()
            if case .chanOpen(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._update = .chanOpen(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._update {
      case .chanPending(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .confirmation(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .chanOpen(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_PendingHTLC: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PendingHTLC"

  //// The direction within the channel that the htlc was sent
  var incoming: Bool = false

  //// The total value of the htlc
  var amount: Int64 = 0

  //// The final output to be swept back to the user's wallet
  var outpoint: String = String()

  //// The next block height at which we can spend the current stage
  var maturityHeight: UInt32 = 0

  ///*
  ///The number of blocks remaining until the current stage can be swept.
  ///Negative values indicate how many blocks have passed since becoming
  ///mature.
  var blocksTilMaturity: Int32 = 0

  //// Indicates whether the htlc is in its first or second stage of recovery
  var stage: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.incoming)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 3: try decoder.decodeSingularStringField(value: &self.outpoint)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.maturityHeight)
      case 5: try decoder.decodeSingularInt32Field(value: &self.blocksTilMaturity)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.stage)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.incoming != false {
      try visitor.visitSingularBoolField(value: self.incoming, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if !self.outpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.outpoint, fieldNumber: 3)
    }
    if self.maturityHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.maturityHeight, fieldNumber: 4)
    }
    if self.blocksTilMaturity != 0 {
      try visitor.visitSingularInt32Field(value: self.blocksTilMaturity, fieldNumber: 5)
    }
    if self.stage != 0 {
      try visitor.visitSingularUInt32Field(value: self.stage, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_PendingChannelsRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PendingChannelsRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_PendingChannelsResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PendingChannelsResponse"

  //// The balance in satoshis encumbered in pending channels
  var totalLimboBalance: Int64 = 0

  //// Channels pending opening
  var pendingOpenChannels: [Lnrpc_PendingChannelsResponse.PendingOpenChannel] = []

  //// Channels pending closing
  var pendingClosingChannels: [Lnrpc_PendingChannelsResponse.ClosedChannel] = []

  //// Channels pending force closing
  var pendingForceClosingChannels: [Lnrpc_PendingChannelsResponse.ForceClosedChannel] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PendingChannel: SwiftProtobuf.Message {
    static let protoMessageName: String = Lnrpc_PendingChannelsResponse.protoMessageName + ".PendingChannel"

    var remoteNodePub: String = String()

    var channelPoint: String = String()

    var capacity: Int64 = 0

    var localBalance: Int64 = 0

    var remoteBalance: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.remoteNodePub)
        case 2: try decoder.decodeSingularStringField(value: &self.channelPoint)
        case 3: try decoder.decodeSingularInt64Field(value: &self.capacity)
        case 4: try decoder.decodeSingularInt64Field(value: &self.localBalance)
        case 5: try decoder.decodeSingularInt64Field(value: &self.remoteBalance)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.remoteNodePub.isEmpty {
        try visitor.visitSingularStringField(value: self.remoteNodePub, fieldNumber: 1)
      }
      if !self.channelPoint.isEmpty {
        try visitor.visitSingularStringField(value: self.channelPoint, fieldNumber: 2)
      }
      if self.capacity != 0 {
        try visitor.visitSingularInt64Field(value: self.capacity, fieldNumber: 3)
      }
      if self.localBalance != 0 {
        try visitor.visitSingularInt64Field(value: self.localBalance, fieldNumber: 4)
      }
      if self.remoteBalance != 0 {
        try visitor.visitSingularInt64Field(value: self.remoteBalance, fieldNumber: 5)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct PendingOpenChannel: SwiftProtobuf.Message {
    static let protoMessageName: String = Lnrpc_PendingChannelsResponse.protoMessageName + ".PendingOpenChannel"

    //// The pending channel
    var channel: Lnrpc_PendingChannelsResponse.PendingChannel {
      get {return _storage._channel ?? Lnrpc_PendingChannelsResponse.PendingChannel()}
      set {_uniqueStorage()._channel = newValue}
    }
    /// Returns true if `channel` has been explicitly set.
    var hasChannel: Bool {return _storage._channel != nil}
    /// Clears the value of `channel`. Subsequent reads from it will return its default value.
    mutating func clearChannel() {_storage._channel = nil}

    //// The height at which this channel will be confirmed
    var confirmationHeight: UInt32 {
      get {return _storage._confirmationHeight}
      set {_uniqueStorage()._confirmationHeight = newValue}
    }

    ///*
    ///The amount calculated to be paid in fees for the current set of
    ///commitment transactions. The fee amount is persisted with the channel
    ///in order to allow the fee amount to be removed and recalculated with
    ///each channel state update, including updates that happen after a system
    ///restart.
    var commitFee: Int64 {
      get {return _storage._commitFee}
      set {_uniqueStorage()._commitFee = newValue}
    }

    //// The weight of the commitment transaction
    var commitWeight: Int64 {
      get {return _storage._commitWeight}
      set {_uniqueStorage()._commitWeight = newValue}
    }

    ///*
    ///The required number of satoshis per kilo-weight that the requester will
    ///pay at all times, for both the funding transaction and commitment
    ///transaction. This value can later be updated once the channel is open.
    var feePerKw: Int64 {
      get {return _storage._feePerKw}
      set {_uniqueStorage()._feePerKw = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._channel)
          case 2: try decoder.decodeSingularUInt32Field(value: &_storage._confirmationHeight)
          case 4: try decoder.decodeSingularInt64Field(value: &_storage._commitFee)
          case 5: try decoder.decodeSingularInt64Field(value: &_storage._commitWeight)
          case 6: try decoder.decodeSingularInt64Field(value: &_storage._feePerKw)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._channel {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if _storage._confirmationHeight != 0 {
          try visitor.visitSingularUInt32Field(value: _storage._confirmationHeight, fieldNumber: 2)
        }
        if _storage._commitFee != 0 {
          try visitor.visitSingularInt64Field(value: _storage._commitFee, fieldNumber: 4)
        }
        if _storage._commitWeight != 0 {
          try visitor.visitSingularInt64Field(value: _storage._commitWeight, fieldNumber: 5)
        }
        if _storage._feePerKw != 0 {
          try visitor.visitSingularInt64Field(value: _storage._feePerKw, fieldNumber: 6)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct ClosedChannel: SwiftProtobuf.Message {
    static let protoMessageName: String = Lnrpc_PendingChannelsResponse.protoMessageName + ".ClosedChannel"

    //// The pending channel to be closed
    var channel: Lnrpc_PendingChannelsResponse.PendingChannel {
      get {return _storage._channel ?? Lnrpc_PendingChannelsResponse.PendingChannel()}
      set {_uniqueStorage()._channel = newValue}
    }
    /// Returns true if `channel` has been explicitly set.
    var hasChannel: Bool {return _storage._channel != nil}
    /// Clears the value of `channel`. Subsequent reads from it will return its default value.
    mutating func clearChannel() {_storage._channel = nil}

    //// The transaction id of the closing transaction
    var closingTxid: String {
      get {return _storage._closingTxid}
      set {_uniqueStorage()._closingTxid = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._channel)
          case 2: try decoder.decodeSingularStringField(value: &_storage._closingTxid)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._channel {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !_storage._closingTxid.isEmpty {
          try visitor.visitSingularStringField(value: _storage._closingTxid, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct ForceClosedChannel: SwiftProtobuf.Message {
    static let protoMessageName: String = Lnrpc_PendingChannelsResponse.protoMessageName + ".ForceClosedChannel"

    //// The pending channel to be force closed
    var channel: Lnrpc_PendingChannelsResponse.PendingChannel {
      get {return _storage._channel ?? Lnrpc_PendingChannelsResponse.PendingChannel()}
      set {_uniqueStorage()._channel = newValue}
    }
    /// Returns true if `channel` has been explicitly set.
    var hasChannel: Bool {return _storage._channel != nil}
    /// Clears the value of `channel`. Subsequent reads from it will return its default value.
    mutating func clearChannel() {_storage._channel = nil}

    //// The transaction id of the closing transaction
    var closingTxid: String {
      get {return _storage._closingTxid}
      set {_uniqueStorage()._closingTxid = newValue}
    }

    //// The balance in satoshis encumbered in this pending channel
    var limboBalance: Int64 {
      get {return _storage._limboBalance}
      set {_uniqueStorage()._limboBalance = newValue}
    }

    //// The height at which funds can be sweeped into the wallet
    var maturityHeight: UInt32 {
      get {return _storage._maturityHeight}
      set {_uniqueStorage()._maturityHeight = newValue}
    }

    ///
    ///Remaining # of blocks until the commitment output can be swept.
    ///Negative values indicate how many blocks have passed since becoming
    ///mature.
    var blocksTilMaturity: Int32 {
      get {return _storage._blocksTilMaturity}
      set {_uniqueStorage()._blocksTilMaturity = newValue}
    }

    //// The total value of funds successfully recovered from this channel
    var recoveredBalance: Int64 {
      get {return _storage._recoveredBalance}
      set {_uniqueStorage()._recoveredBalance = newValue}
    }

    var pendingHtlcs: [Lnrpc_PendingHTLC] {
      get {return _storage._pendingHtlcs}
      set {_uniqueStorage()._pendingHtlcs = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._channel)
          case 2: try decoder.decodeSingularStringField(value: &_storage._closingTxid)
          case 3: try decoder.decodeSingularInt64Field(value: &_storage._limboBalance)
          case 4: try decoder.decodeSingularUInt32Field(value: &_storage._maturityHeight)
          case 5: try decoder.decodeSingularInt32Field(value: &_storage._blocksTilMaturity)
          case 6: try decoder.decodeSingularInt64Field(value: &_storage._recoveredBalance)
          case 8: try decoder.decodeRepeatedMessageField(value: &_storage._pendingHtlcs)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._channel {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !_storage._closingTxid.isEmpty {
          try visitor.visitSingularStringField(value: _storage._closingTxid, fieldNumber: 2)
        }
        if _storage._limboBalance != 0 {
          try visitor.visitSingularInt64Field(value: _storage._limboBalance, fieldNumber: 3)
        }
        if _storage._maturityHeight != 0 {
          try visitor.visitSingularUInt32Field(value: _storage._maturityHeight, fieldNumber: 4)
        }
        if _storage._blocksTilMaturity != 0 {
          try visitor.visitSingularInt32Field(value: _storage._blocksTilMaturity, fieldNumber: 5)
        }
        if _storage._recoveredBalance != 0 {
          try visitor.visitSingularInt64Field(value: _storage._recoveredBalance, fieldNumber: 6)
        }
        if !_storage._pendingHtlcs.isEmpty {
          try visitor.visitRepeatedMessageField(value: _storage._pendingHtlcs, fieldNumber: 8)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.totalLimboBalance)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.pendingOpenChannels)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.pendingClosingChannels)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.pendingForceClosingChannels)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalLimboBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.totalLimboBalance, fieldNumber: 1)
    }
    if !self.pendingOpenChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pendingOpenChannels, fieldNumber: 2)
    }
    if !self.pendingClosingChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pendingClosingChannels, fieldNumber: 3)
    }
    if !self.pendingForceClosingChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pendingForceClosingChannels, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_WalletBalanceRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".WalletBalanceRequest"

  //// If only witness outputs should be considered when calculating the wallet's balance
  var witnessOnly: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.witnessOnly)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.witnessOnly != false {
      try visitor.visitSingularBoolField(value: self.witnessOnly, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_WalletBalanceResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".WalletBalanceResponse"

  //// The balance of the wallet
  var totalBalance: Int64 = 0

  //// The confirmed balance of a wallet(with >= 1 confirmations)
  var confirmedBalance: Int64 = 0

  //// The unconfirmed balance of a wallet(with 0 confirmations)
  var unconfirmedBalance: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.totalBalance)
      case 2: try decoder.decodeSingularInt64Field(value: &self.confirmedBalance)
      case 3: try decoder.decodeSingularInt64Field(value: &self.unconfirmedBalance)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.totalBalance, fieldNumber: 1)
    }
    if self.confirmedBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.confirmedBalance, fieldNumber: 2)
    }
    if self.unconfirmedBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.unconfirmedBalance, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ChannelBalanceRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelBalanceRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ChannelBalanceResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelBalanceResponse"

  //// Sum of channels balances denominated in satoshis
  var balance: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.balance)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.balance != 0 {
      try visitor.visitSingularInt64Field(value: self.balance, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_QueryRoutesRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".QueryRoutesRequest"

  //// The 33-byte hex-encoded public key for the payment destination
  var pubKey: String = String()

  //// The amount to send expressed in satoshis
  var amt: Int64 = 0

  //// The max number of routes to return.
  var numRoutes: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pubKey)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amt)
      case 3: try decoder.decodeSingularInt32Field(value: &self.numRoutes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubKey, fieldNumber: 1)
    }
    if self.amt != 0 {
      try visitor.visitSingularInt64Field(value: self.amt, fieldNumber: 2)
    }
    if self.numRoutes != 0 {
      try visitor.visitSingularInt32Field(value: self.numRoutes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_QueryRoutesResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".QueryRoutesResponse"

  var routes: [Lnrpc_Route] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.routes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_Hop: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Hop"

  ///*
  ///The unique channel ID for the channel. The first 3 bytes are the block
  ///height, the next 3 the index within the block, and the last 2 bytes are the
  ///output index for the channel.
  var chanID: UInt64 = 0

  var chanCapacity: Int64 = 0

  var amtToForward: Int64 = 0

  var fee: Int64 = 0

  var expiry: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.chanID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.chanCapacity)
      case 3: try decoder.decodeSingularInt64Field(value: &self.amtToForward)
      case 4: try decoder.decodeSingularInt64Field(value: &self.fee)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.expiry)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.chanID != 0 {
      try visitor.visitSingularUInt64Field(value: self.chanID, fieldNumber: 1)
    }
    if self.chanCapacity != 0 {
      try visitor.visitSingularInt64Field(value: self.chanCapacity, fieldNumber: 2)
    }
    if self.amtToForward != 0 {
      try visitor.visitSingularInt64Field(value: self.amtToForward, fieldNumber: 3)
    }
    if self.fee != 0 {
      try visitor.visitSingularInt64Field(value: self.fee, fieldNumber: 4)
    }
    if self.expiry != 0 {
      try visitor.visitSingularUInt32Field(value: self.expiry, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*
///A path through the channel graph which runs over one or more channels in
///succession. This struct carries all the information required to craft the
///Sphinx onion packet, and send the payment along the first hop in the path. A
///route is only selected as valid if all the channels have sufficient capacity to
///carry the initial payment amount after fees are accounted for.
struct Lnrpc_Route: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Route"

  ///*
  ///The cumulative (final) time lock across the entire route.  This is the CLTV
  ///value that should be extended to the first hop in the route. All other hops
  ///will decrement the time-lock as advertised, leaving enough time for all
  ///hops to wait for or present the payment preimage to complete the payment.
  var totalTimeLock: UInt32 = 0

  ///*
  ///The sum of the fees paid at each hop within the final route.  In the case
  ///of a one-hop payment, this value will be zero as we don't need to pay a fee
  ///it ourself.
  var totalFees: Int64 = 0

  ///*
  ///The total amount of funds required to complete a payment over this route.
  ///This value includes the cumulative fees at each hop. As a result, the HTLC
  ///extended to the first-hop in the route will need to have at least this many
  ///satoshis, otherwise the route will fail at an intermediate node due to an
  ///insufficient amount of fees.
  var totalAmt: Int64 = 0

  ///*
  ///Contains details concerning the specific forwarding details at each hop.
  var hops: [Lnrpc_Hop] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.totalTimeLock)
      case 2: try decoder.decodeSingularInt64Field(value: &self.totalFees)
      case 3: try decoder.decodeSingularInt64Field(value: &self.totalAmt)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.hops)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalTimeLock != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalTimeLock, fieldNumber: 1)
    }
    if self.totalFees != 0 {
      try visitor.visitSingularInt64Field(value: self.totalFees, fieldNumber: 2)
    }
    if self.totalAmt != 0 {
      try visitor.visitSingularInt64Field(value: self.totalAmt, fieldNumber: 3)
    }
    if !self.hops.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hops, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_NodeInfoRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NodeInfoRequest"

  //// The 33-byte hex-encoded compressed public of the target node 
  var pubKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pubKey)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_NodeInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NodeInfo"

  ///*
  ///An individual vertex/node within the channel graph. A node is
  ///connected to other nodes by one or more channel edges emanating from it. As
  ///the graph is directed, a node will also have an incoming edge attached to
  ///it for each outgoing edge.
  var node: Lnrpc_LightningNode {
    get {return _storage._node ?? Lnrpc_LightningNode()}
    set {_uniqueStorage()._node = newValue}
  }
  /// Returns true if `node` has been explicitly set.
  var hasNode: Bool {return _storage._node != nil}
  /// Clears the value of `node`. Subsequent reads from it will return its default value.
  mutating func clearNode() {_storage._node = nil}

  var numChannels: UInt32 {
    get {return _storage._numChannels}
    set {_uniqueStorage()._numChannels = newValue}
  }

  var totalCapacity: Int64 {
    get {return _storage._totalCapacity}
    set {_uniqueStorage()._totalCapacity = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._node)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._numChannels)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._totalCapacity)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._node {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._numChannels != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._numChannels, fieldNumber: 2)
      }
      if _storage._totalCapacity != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalCapacity, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
///An individual vertex/node within the channel graph. A node is
///connected to other nodes by one or more channel edges emanating from it. As the
///graph is directed, a node will also have an incoming edge attached to it for
///each outgoing edge.
struct Lnrpc_LightningNode: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LightningNode"

  var lastUpdate: UInt32 = 0

  var pubKey: String = String()

  var alias: String = String()

  var addresses: [Lnrpc_NodeAddress] = []

  var color: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.lastUpdate)
      case 2: try decoder.decodeSingularStringField(value: &self.pubKey)
      case 3: try decoder.decodeSingularStringField(value: &self.alias)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.addresses)
      case 5: try decoder.decodeSingularStringField(value: &self.color)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastUpdate != 0 {
      try visitor.visitSingularUInt32Field(value: self.lastUpdate, fieldNumber: 1)
    }
    if !self.pubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubKey, fieldNumber: 2)
    }
    if !self.alias.isEmpty {
      try visitor.visitSingularStringField(value: self.alias, fieldNumber: 3)
    }
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addresses, fieldNumber: 4)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_NodeAddress: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NodeAddress"

  var network: String = String()

  var addr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.network)
      case 2: try decoder.decodeSingularStringField(value: &self.addr)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.network.isEmpty {
      try visitor.visitSingularStringField(value: self.network, fieldNumber: 1)
    }
    if !self.addr.isEmpty {
      try visitor.visitSingularStringField(value: self.addr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_RoutingPolicy: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RoutingPolicy"

  var timeLockDelta: UInt32 = 0

  var minHtlc: Int64 = 0

  var feeBaseMsat: Int64 = 0

  var feeRateMilliMsat: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.timeLockDelta)
      case 2: try decoder.decodeSingularInt64Field(value: &self.minHtlc)
      case 3: try decoder.decodeSingularInt64Field(value: &self.feeBaseMsat)
      case 4: try decoder.decodeSingularInt64Field(value: &self.feeRateMilliMsat)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timeLockDelta != 0 {
      try visitor.visitSingularUInt32Field(value: self.timeLockDelta, fieldNumber: 1)
    }
    if self.minHtlc != 0 {
      try visitor.visitSingularInt64Field(value: self.minHtlc, fieldNumber: 2)
    }
    if self.feeBaseMsat != 0 {
      try visitor.visitSingularInt64Field(value: self.feeBaseMsat, fieldNumber: 3)
    }
    if self.feeRateMilliMsat != 0 {
      try visitor.visitSingularInt64Field(value: self.feeRateMilliMsat, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*
///A fully authenticated channel along with all its unique attributes.
///Once an authenticated channel announcement has been processed on the network,
///then a instance of ChannelEdgeInfo encapsulating the channels attributes is
///stored. The other portions relevant to routing policy of a channel are stored
///within a ChannelEdgePolicy for each direction of the channel.
struct Lnrpc_ChannelEdge: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelEdge"

  ///*
  ///The unique channel ID for the channel. The first 3 bytes are the block
  ///height, the next 3 the index within the block, and the last 2 bytes are the
  ///output index for the channel.
  var channelID: UInt64 {
    get {return _storage._channelID}
    set {_uniqueStorage()._channelID = newValue}
  }

  var chanPoint: String {
    get {return _storage._chanPoint}
    set {_uniqueStorage()._chanPoint = newValue}
  }

  var lastUpdate: UInt32 {
    get {return _storage._lastUpdate}
    set {_uniqueStorage()._lastUpdate = newValue}
  }

  var node1Pub: String {
    get {return _storage._node1Pub}
    set {_uniqueStorage()._node1Pub = newValue}
  }

  var node2Pub: String {
    get {return _storage._node2Pub}
    set {_uniqueStorage()._node2Pub = newValue}
  }

  var capacity: Int64 {
    get {return _storage._capacity}
    set {_uniqueStorage()._capacity = newValue}
  }

  var node1Policy: Lnrpc_RoutingPolicy {
    get {return _storage._node1Policy ?? Lnrpc_RoutingPolicy()}
    set {_uniqueStorage()._node1Policy = newValue}
  }
  /// Returns true if `node1Policy` has been explicitly set.
  var hasNode1Policy: Bool {return _storage._node1Policy != nil}
  /// Clears the value of `node1Policy`. Subsequent reads from it will return its default value.
  mutating func clearNode1Policy() {_storage._node1Policy = nil}

  var node2Policy: Lnrpc_RoutingPolicy {
    get {return _storage._node2Policy ?? Lnrpc_RoutingPolicy()}
    set {_uniqueStorage()._node2Policy = newValue}
  }
  /// Returns true if `node2Policy` has been explicitly set.
  var hasNode2Policy: Bool {return _storage._node2Policy != nil}
  /// Clears the value of `node2Policy`. Subsequent reads from it will return its default value.
  mutating func clearNode2Policy() {_storage._node2Policy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._channelID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._chanPoint)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._lastUpdate)
        case 4: try decoder.decodeSingularStringField(value: &_storage._node1Pub)
        case 5: try decoder.decodeSingularStringField(value: &_storage._node2Pub)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._capacity)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._node1Policy)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._node2Policy)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._channelID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._channelID, fieldNumber: 1)
      }
      if !_storage._chanPoint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chanPoint, fieldNumber: 2)
      }
      if _storage._lastUpdate != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lastUpdate, fieldNumber: 3)
      }
      if !_storage._node1Pub.isEmpty {
        try visitor.visitSingularStringField(value: _storage._node1Pub, fieldNumber: 4)
      }
      if !_storage._node2Pub.isEmpty {
        try visitor.visitSingularStringField(value: _storage._node2Pub, fieldNumber: 5)
      }
      if _storage._capacity != 0 {
        try visitor.visitSingularInt64Field(value: _storage._capacity, fieldNumber: 6)
      }
      if let v = _storage._node1Policy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._node2Policy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_ChannelGraphRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelGraphRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

//// Returns a new instance of the directed channel graph.
struct Lnrpc_ChannelGraph: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelGraph"

  //// The list of `LightningNode`s in this channel graph
  var nodes: [Lnrpc_LightningNode] = []

  //// The list of `ChannelEdge`s in this channel graph
  var edges: [Lnrpc_ChannelEdge] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodes)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.edges)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodes, fieldNumber: 1)
    }
    if !self.edges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.edges, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ChanInfoRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChanInfoRequest"

  ///*
  ///The unique channel ID for the channel. The first 3 bytes are the block
  ///height, the next 3 the index within the block, and the last 2 bytes are the
  ///output index for the channel.
  var chanID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.chanID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.chanID != 0 {
      try visitor.visitSingularUInt64Field(value: self.chanID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_NetworkInfoRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NetworkInfoRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_NetworkInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NetworkInfo"

  var graphDiameter: UInt32 = 0

  var avgOutDegree: Double = 0

  var maxOutDegree: UInt32 = 0

  var numNodes: UInt32 = 0

  var numChannels: UInt32 = 0

  var totalNetworkCapacity: Int64 = 0

  var avgChannelSize: Double = 0

  var minChannelSize: Int64 = 0

  var maxChannelSize: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.graphDiameter)
      case 2: try decoder.decodeSingularDoubleField(value: &self.avgOutDegree)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.maxOutDegree)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.numNodes)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.numChannels)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalNetworkCapacity)
      case 7: try decoder.decodeSingularDoubleField(value: &self.avgChannelSize)
      case 8: try decoder.decodeSingularInt64Field(value: &self.minChannelSize)
      case 9: try decoder.decodeSingularInt64Field(value: &self.maxChannelSize)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.graphDiameter != 0 {
      try visitor.visitSingularUInt32Field(value: self.graphDiameter, fieldNumber: 1)
    }
    if self.avgOutDegree != 0 {
      try visitor.visitSingularDoubleField(value: self.avgOutDegree, fieldNumber: 2)
    }
    if self.maxOutDegree != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxOutDegree, fieldNumber: 3)
    }
    if self.numNodes != 0 {
      try visitor.visitSingularUInt32Field(value: self.numNodes, fieldNumber: 4)
    }
    if self.numChannels != 0 {
      try visitor.visitSingularUInt32Field(value: self.numChannels, fieldNumber: 5)
    }
    if self.totalNetworkCapacity != 0 {
      try visitor.visitSingularInt64Field(value: self.totalNetworkCapacity, fieldNumber: 6)
    }
    if self.avgChannelSize != 0 {
      try visitor.visitSingularDoubleField(value: self.avgChannelSize, fieldNumber: 7)
    }
    if self.minChannelSize != 0 {
      try visitor.visitSingularInt64Field(value: self.minChannelSize, fieldNumber: 8)
    }
    if self.maxChannelSize != 0 {
      try visitor.visitSingularInt64Field(value: self.maxChannelSize, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_StopRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".StopRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_StopResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".StopResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_GraphTopologySubscription: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GraphTopologySubscription"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_GraphTopologyUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GraphTopologyUpdate"

  var nodeUpdates: [Lnrpc_NodeUpdate] = []

  var channelUpdates: [Lnrpc_ChannelEdgeUpdate] = []

  var closedChans: [Lnrpc_ClosedChannelUpdate] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodeUpdates)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.channelUpdates)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.closedChans)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeUpdates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodeUpdates, fieldNumber: 1)
    }
    if !self.channelUpdates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.channelUpdates, fieldNumber: 2)
    }
    if !self.closedChans.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.closedChans, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_NodeUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".NodeUpdate"

  var addresses: [String] = []

  var identityKey: String = String()

  var globalFeatures: Data = SwiftProtobuf.Internal.emptyData

  var alias: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.addresses)
      case 2: try decoder.decodeSingularStringField(value: &self.identityKey)
      case 3: try decoder.decodeSingularBytesField(value: &self.globalFeatures)
      case 4: try decoder.decodeSingularStringField(value: &self.alias)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addresses, fieldNumber: 1)
    }
    if !self.identityKey.isEmpty {
      try visitor.visitSingularStringField(value: self.identityKey, fieldNumber: 2)
    }
    if !self.globalFeatures.isEmpty {
      try visitor.visitSingularBytesField(value: self.globalFeatures, fieldNumber: 3)
    }
    if !self.alias.isEmpty {
      try visitor.visitSingularStringField(value: self.alias, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ChannelEdgeUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelEdgeUpdate"

  ///*
  ///The unique channel ID for the channel. The first 3 bytes are the block
  ///height, the next 3 the index within the block, and the last 2 bytes are the
  ///output index for the channel.
  var chanID: UInt64 {
    get {return _storage._chanID}
    set {_uniqueStorage()._chanID = newValue}
  }

  var chanPoint: Lnrpc_ChannelPoint {
    get {return _storage._chanPoint ?? Lnrpc_ChannelPoint()}
    set {_uniqueStorage()._chanPoint = newValue}
  }
  /// Returns true if `chanPoint` has been explicitly set.
  var hasChanPoint: Bool {return _storage._chanPoint != nil}
  /// Clears the value of `chanPoint`. Subsequent reads from it will return its default value.
  mutating func clearChanPoint() {_storage._chanPoint = nil}

  var capacity: Int64 {
    get {return _storage._capacity}
    set {_uniqueStorage()._capacity = newValue}
  }

  var routingPolicy: Lnrpc_RoutingPolicy {
    get {return _storage._routingPolicy ?? Lnrpc_RoutingPolicy()}
    set {_uniqueStorage()._routingPolicy = newValue}
  }
  /// Returns true if `routingPolicy` has been explicitly set.
  var hasRoutingPolicy: Bool {return _storage._routingPolicy != nil}
  /// Clears the value of `routingPolicy`. Subsequent reads from it will return its default value.
  mutating func clearRoutingPolicy() {_storage._routingPolicy = nil}

  var advertisingNode: String {
    get {return _storage._advertisingNode}
    set {_uniqueStorage()._advertisingNode = newValue}
  }

  var connectingNode: String {
    get {return _storage._connectingNode}
    set {_uniqueStorage()._connectingNode = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._chanID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._chanPoint)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._capacity)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._routingPolicy)
        case 5: try decoder.decodeSingularStringField(value: &_storage._advertisingNode)
        case 6: try decoder.decodeSingularStringField(value: &_storage._connectingNode)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._chanID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._chanID, fieldNumber: 1)
      }
      if let v = _storage._chanPoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._capacity != 0 {
        try visitor.visitSingularInt64Field(value: _storage._capacity, fieldNumber: 3)
      }
      if let v = _storage._routingPolicy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._advertisingNode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._advertisingNode, fieldNumber: 5)
      }
      if !_storage._connectingNode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._connectingNode, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_ClosedChannelUpdate: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ClosedChannelUpdate"

  ///*
  ///The unique channel ID for the channel. The first 3 bytes are the block
  ///height, the next 3 the index within the block, and the last 2 bytes are the
  ///output index for the channel.
  var chanID: UInt64 {
    get {return _storage._chanID}
    set {_uniqueStorage()._chanID = newValue}
  }

  var capacity: Int64 {
    get {return _storage._capacity}
    set {_uniqueStorage()._capacity = newValue}
  }

  var closedHeight: UInt32 {
    get {return _storage._closedHeight}
    set {_uniqueStorage()._closedHeight = newValue}
  }

  var chanPoint: Lnrpc_ChannelPoint {
    get {return _storage._chanPoint ?? Lnrpc_ChannelPoint()}
    set {_uniqueStorage()._chanPoint = newValue}
  }
  /// Returns true if `chanPoint` has been explicitly set.
  var hasChanPoint: Bool {return _storage._chanPoint != nil}
  /// Clears the value of `chanPoint`. Subsequent reads from it will return its default value.
  mutating func clearChanPoint() {_storage._chanPoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._chanID)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._capacity)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._closedHeight)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._chanPoint)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._chanID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._chanID, fieldNumber: 1)
      }
      if _storage._capacity != 0 {
        try visitor.visitSingularInt64Field(value: _storage._capacity, fieldNumber: 2)
      }
      if _storage._closedHeight != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._closedHeight, fieldNumber: 3)
      }
      if let v = _storage._chanPoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_Invoice: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Invoice"

  ///*
  ///An optional memo to attach along with the invoice. Used for record keeping
  ///purposes for the invoice's creator, and will also be set in the description
  ///field of the encoded payment request if the description_hash field is not
  ///being used.
  var memo: String = String()

  //// An optional cryptographic receipt of payment
  var receipt: Data = SwiftProtobuf.Internal.emptyData

  ///*
  ///The hex-encoded preimage (32 byte) which will allow settling an incoming
  ///HTLC payable to this preimage
  var rPreimage: Data = SwiftProtobuf.Internal.emptyData

  //// The hash of the preimage
  var rHash: Data = SwiftProtobuf.Internal.emptyData

  //// The value of this invoice in satoshis
  var value: Int64 = 0

  //// Whether this invoice has been fulfilled
  var settled: Bool = false

  //// When this invoice was created
  var creationDate: Int64 = 0

  //// When this invoice was settled
  var settleDate: Int64 = 0

  ///*
  ///A bare-bones invoice for a payment within the Lightning Network.  With the
  ///details of the invoice, the sender has all the data necessary to send a
  ///payment to the recipient.
  var paymentRequest: String = String()

  ///*
  ///Hash (SHA-256) of a description of the payment. Used if the description of
  ///payment (memo) is too long to naturally fit within the description field
  ///of an encoded payment request.
  var descriptionHash: Data = SwiftProtobuf.Internal.emptyData

  //// Payment request expiry time in seconds. Default is 3600 (1 hour).
  var expiry: Int64 = 0

  //// Fallback on-chain address.
  var fallbackAddr: String = String()

  //// Delta to use for the time-lock of the CLTV extended to the final hop.
  var cltvExpiry: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.memo)
      case 2: try decoder.decodeSingularBytesField(value: &self.receipt)
      case 3: try decoder.decodeSingularBytesField(value: &self.rPreimage)
      case 4: try decoder.decodeSingularBytesField(value: &self.rHash)
      case 5: try decoder.decodeSingularInt64Field(value: &self.value)
      case 6: try decoder.decodeSingularBoolField(value: &self.settled)
      case 7: try decoder.decodeSingularInt64Field(value: &self.creationDate)
      case 8: try decoder.decodeSingularInt64Field(value: &self.settleDate)
      case 9: try decoder.decodeSingularStringField(value: &self.paymentRequest)
      case 10: try decoder.decodeSingularBytesField(value: &self.descriptionHash)
      case 11: try decoder.decodeSingularInt64Field(value: &self.expiry)
      case 12: try decoder.decodeSingularStringField(value: &self.fallbackAddr)
      case 13: try decoder.decodeSingularUInt64Field(value: &self.cltvExpiry)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 1)
    }
    if !self.receipt.isEmpty {
      try visitor.visitSingularBytesField(value: self.receipt, fieldNumber: 2)
    }
    if !self.rPreimage.isEmpty {
      try visitor.visitSingularBytesField(value: self.rPreimage, fieldNumber: 3)
    }
    if !self.rHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.rHash, fieldNumber: 4)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 5)
    }
    if self.settled != false {
      try visitor.visitSingularBoolField(value: self.settled, fieldNumber: 6)
    }
    if self.creationDate != 0 {
      try visitor.visitSingularInt64Field(value: self.creationDate, fieldNumber: 7)
    }
    if self.settleDate != 0 {
      try visitor.visitSingularInt64Field(value: self.settleDate, fieldNumber: 8)
    }
    if !self.paymentRequest.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentRequest, fieldNumber: 9)
    }
    if !self.descriptionHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.descriptionHash, fieldNumber: 10)
    }
    if self.expiry != 0 {
      try visitor.visitSingularInt64Field(value: self.expiry, fieldNumber: 11)
    }
    if !self.fallbackAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.fallbackAddr, fieldNumber: 12)
    }
    if self.cltvExpiry != 0 {
      try visitor.visitSingularUInt64Field(value: self.cltvExpiry, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_AddInvoiceResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".AddInvoiceResponse"

  var rHash: Data = SwiftProtobuf.Internal.emptyData

  ///*
  ///A bare-bones invoice for a payment within the Lightning Network.  With the
  ///details of the invoice, the sender has all the data necessary to send a
  ///payment to the recipient.
  var paymentRequest: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.rHash)
      case 2: try decoder.decodeSingularStringField(value: &self.paymentRequest)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.rHash, fieldNumber: 1)
    }
    if !self.paymentRequest.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentRequest, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_PaymentHash: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PaymentHash"

  ///*
  ///The hex-encoded payment hash of the invoice to be looked up. The passed
  ///payment hash must be exactly 32 bytes, otherwise an error is returned.
  var rHashStr: String = String()

  //// The payment hash of the invoice to be looked up.
  var rHash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.rHashStr)
      case 2: try decoder.decodeSingularBytesField(value: &self.rHash)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rHashStr.isEmpty {
      try visitor.visitSingularStringField(value: self.rHashStr, fieldNumber: 1)
    }
    if !self.rHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.rHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ListInvoiceRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListInvoiceRequest"

  //// Toggles if all invoices should be returned, or only those that are currently unsettled.
  var pendingOnly: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.pendingOnly)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pendingOnly != false {
      try visitor.visitSingularBoolField(value: self.pendingOnly, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ListInvoiceResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListInvoiceResponse"

  var invoices: [Lnrpc_Invoice] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.invoices)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.invoices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.invoices, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_InvoiceSubscription: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".InvoiceSubscription"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_Payment: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Payment"

  //// The payment hash
  var paymentHash: String = String()

  //// The value of the payment in satoshis
  var value: Int64 = 0

  //// The date of this payment
  var creationDate: Int64 = 0

  //// The path this payment took
  var path: [String] = []

  //// The fee paid for this payment in satoshis
  var fee: Int64 = 0

  //// The payment preimage
  var paymentPreimage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.paymentHash)
      case 2: try decoder.decodeSingularInt64Field(value: &self.value)
      case 3: try decoder.decodeSingularInt64Field(value: &self.creationDate)
      case 4: try decoder.decodeRepeatedStringField(value: &self.path)
      case 5: try decoder.decodeSingularInt64Field(value: &self.fee)
      case 6: try decoder.decodeSingularStringField(value: &self.paymentPreimage)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.paymentHash.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentHash, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 2)
    }
    if self.creationDate != 0 {
      try visitor.visitSingularInt64Field(value: self.creationDate, fieldNumber: 3)
    }
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 4)
    }
    if self.fee != 0 {
      try visitor.visitSingularInt64Field(value: self.fee, fieldNumber: 5)
    }
    if !self.paymentPreimage.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentPreimage, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ListPaymentsRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListPaymentsRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ListPaymentsResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListPaymentsResponse"

  //// The list of payments
  var payments: [Lnrpc_Payment] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.payments)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.payments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_DeleteAllPaymentsRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DeleteAllPaymentsRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_DeleteAllPaymentsResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DeleteAllPaymentsResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_DebugLevelRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DebugLevelRequest"

  var show: Bool = false

  var levelSpec: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.show)
      case 2: try decoder.decodeSingularStringField(value: &self.levelSpec)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.show != false {
      try visitor.visitSingularBoolField(value: self.show, fieldNumber: 1)
    }
    if !self.levelSpec.isEmpty {
      try visitor.visitSingularStringField(value: self.levelSpec, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_DebugLevelResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DebugLevelResponse"

  var subSystems: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.subSystems)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subSystems.isEmpty {
      try visitor.visitSingularStringField(value: self.subSystems, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_PayReqString: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PayReqString"

  //// The payment request string to be decoded
  var payReq: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.payReq)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payReq.isEmpty {
      try visitor.visitSingularStringField(value: self.payReq, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_PayReq: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PayReq"

  var destination: String = String()

  var paymentHash: String = String()

  var numSatoshis: Int64 = 0

  var timestamp: Int64 = 0

  var expiry: Int64 = 0

  var description_p: String = String()

  var descriptionHash: String = String()

  var fallbackAddr: String = String()

  var cltvExpiry: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.destination)
      case 2: try decoder.decodeSingularStringField(value: &self.paymentHash)
      case 3: try decoder.decodeSingularInt64Field(value: &self.numSatoshis)
      case 4: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 5: try decoder.decodeSingularInt64Field(value: &self.expiry)
      case 6: try decoder.decodeSingularStringField(value: &self.description_p)
      case 7: try decoder.decodeSingularStringField(value: &self.descriptionHash)
      case 8: try decoder.decodeSingularStringField(value: &self.fallbackAddr)
      case 9: try decoder.decodeSingularInt64Field(value: &self.cltvExpiry)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 1)
    }
    if !self.paymentHash.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentHash, fieldNumber: 2)
    }
    if self.numSatoshis != 0 {
      try visitor.visitSingularInt64Field(value: self.numSatoshis, fieldNumber: 3)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 4)
    }
    if self.expiry != 0 {
      try visitor.visitSingularInt64Field(value: self.expiry, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if !self.descriptionHash.isEmpty {
      try visitor.visitSingularStringField(value: self.descriptionHash, fieldNumber: 7)
    }
    if !self.fallbackAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.fallbackAddr, fieldNumber: 8)
    }
    if self.cltvExpiry != 0 {
      try visitor.visitSingularInt64Field(value: self.cltvExpiry, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_FeeReportRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FeeReportRequest"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_ChannelFeeReport: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ChannelFeeReport"

  //// The channel that this fee report belongs to.
  var chanPoint: String = String()

  //// The base fee charged regardless of the number of milli-satoshis sent.
  var baseFeeMsat: Int64 = 0

  //// The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
  var feePerMil: Int64 = 0

  //// The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
  var feeRate: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.chanPoint)
      case 2: try decoder.decodeSingularInt64Field(value: &self.baseFeeMsat)
      case 3: try decoder.decodeSingularInt64Field(value: &self.feePerMil)
      case 4: try decoder.decodeSingularDoubleField(value: &self.feeRate)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chanPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.chanPoint, fieldNumber: 1)
    }
    if self.baseFeeMsat != 0 {
      try visitor.visitSingularInt64Field(value: self.baseFeeMsat, fieldNumber: 2)
    }
    if self.feePerMil != 0 {
      try visitor.visitSingularInt64Field(value: self.feePerMil, fieldNumber: 3)
    }
    if self.feeRate != 0 {
      try visitor.visitSingularDoubleField(value: self.feeRate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_FeeReportResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FeeReportResponse"

  //// An array of channel fee reports which describes the current fee schedule for each channel.
  var channelFees: [Lnrpc_ChannelFeeReport] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.channelFees)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.channelFees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.channelFees, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lnrpc_PolicyUpdateRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PolicyUpdateRequest"

  var scope: OneOf_Scope? {
    get {return _storage._scope}
    set {_uniqueStorage()._scope = newValue}
  }

  //// If set, then this update applies to all currently active channels.
  var global: Bool {
    get {
      if case .global(let v)? = _storage._scope {return v}
      return false
    }
    set {_uniqueStorage()._scope = .global(newValue)}
  }

  //// If set, this update will target a specific channel.
  var chanPoint: Lnrpc_ChannelPoint {
    get {
      if case .chanPoint(let v)? = _storage._scope {return v}
      return Lnrpc_ChannelPoint()
    }
    set {_uniqueStorage()._scope = .chanPoint(newValue)}
  }

  //// The base fee charged regardless of the number of milli-satoshis sent.
  var baseFeeMsat: Int64 {
    get {return _storage._baseFeeMsat}
    set {_uniqueStorage()._baseFeeMsat = newValue}
  }

  //// The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
  var feeRate: Double {
    get {return _storage._feeRate}
    set {_uniqueStorage()._feeRate = newValue}
  }

  //// The required timelock delta for HTLCs forwarded over the channel.
  var timeLockDelta: UInt32 {
    get {return _storage._timeLockDelta}
    set {_uniqueStorage()._timeLockDelta = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Scope: Equatable {
    //// If set, then this update applies to all currently active channels.
    case global(Bool)
    //// If set, this update will target a specific channel.
    case chanPoint(Lnrpc_ChannelPoint)

    static func ==(lhs: Lnrpc_PolicyUpdateRequest.OneOf_Scope, rhs: Lnrpc_PolicyUpdateRequest.OneOf_Scope) -> Bool {
      switch (lhs, rhs) {
      case (.global(let l), .global(let r)): return l == r
      case (.chanPoint(let l), .chanPoint(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._scope != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._scope = .global(v)}
        case 2:
          var v: Lnrpc_ChannelPoint?
          if let current = _storage._scope {
            try decoder.handleConflictingOneOf()
            if case .chanPoint(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._scope = .chanPoint(v)}
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._baseFeeMsat)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._feeRate)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._timeLockDelta)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._scope {
      case .global(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      case .chanPoint(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
      if _storage._baseFeeMsat != 0 {
        try visitor.visitSingularInt64Field(value: _storage._baseFeeMsat, fieldNumber: 3)
      }
      if _storage._feeRate != 0 {
        try visitor.visitSingularDoubleField(value: _storage._feeRate, fieldNumber: 4)
      }
      if _storage._timeLockDelta != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._timeLockDelta, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lnrpc_PolicyUpdateResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PolicyUpdateResponse"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lnrpc"

extension Lnrpc_CreateWalletRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "password"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_CreateWalletRequest) -> Bool {
    if self.password != other.password {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_CreateWalletResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_CreateWalletResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_UnlockWalletRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "password"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_UnlockWalletRequest) -> Bool {
    if self.password != other.password {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_UnlockWalletResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_UnlockWalletResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_Transaction: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tx_hash"),
    2: .same(proto: "amount"),
    3: .same(proto: "num_confirmations"),
    4: .same(proto: "block_hash"),
    5: .same(proto: "block_height"),
    6: .same(proto: "time_stamp"),
    7: .same(proto: "total_fees"),
    8: .same(proto: "dest_addresses"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_Transaction) -> Bool {
    if self.txHash != other.txHash {return false}
    if self.amount != other.amount {return false}
    if self.numConfirmations != other.numConfirmations {return false}
    if self.blockHash != other.blockHash {return false}
    if self.blockHeight != other.blockHeight {return false}
    if self.timeStamp != other.timeStamp {return false}
    if self.totalFees != other.totalFees {return false}
    if self.destAddresses != other.destAddresses {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_GetTransactionsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_GetTransactionsRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_TransactionDetails: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transactions"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_TransactionDetails) -> Bool {
    if self.transactions != other.transactions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_SendRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dest"),
    2: .standard(proto: "dest_string"),
    3: .same(proto: "amt"),
    4: .standard(proto: "payment_hash"),
    5: .standard(proto: "payment_hash_string"),
    6: .standard(proto: "payment_request"),
    7: .standard(proto: "final_cltv_delta"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_SendRequest) -> Bool {
    if self.dest != other.dest {return false}
    if self.destString != other.destString {return false}
    if self.amt != other.amt {return false}
    if self.paymentHash != other.paymentHash {return false}
    if self.paymentHashString != other.paymentHashString {return false}
    if self.paymentRequest != other.paymentRequest {return false}
    if self.finalCltvDelta != other.finalCltvDelta {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_SendResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payment_error"),
    2: .same(proto: "payment_preimage"),
    3: .same(proto: "payment_route"),
  ]

  fileprivate class _StorageClass {
    var _paymentError: String = String()
    var _paymentPreimage: Data = SwiftProtobuf.Internal.emptyData
    var _paymentRoute: Lnrpc_Route? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _paymentError = source._paymentError
      _paymentPreimage = source._paymentPreimage
      _paymentRoute = source._paymentRoute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_SendResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._paymentError != other_storage._paymentError {return false}
        if _storage._paymentPreimage != other_storage._paymentPreimage {return false}
        if _storage._paymentRoute != other_storage._paymentRoute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelPoint: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "funding_txid_bytes"),
    2: .same(proto: "funding_txid_str"),
    3: .same(proto: "output_index"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelPoint) -> Bool {
    if self.fundingTxid != other.fundingTxid {return false}
    if self.outputIndex != other.outputIndex {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_LightningAddress: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pubkey"),
    2: .same(proto: "host"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_LightningAddress) -> Bool {
    if self.pubkey != other.pubkey {return false}
    if self.host != other.host {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_SendManyRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AddrToAmount"),
    3: .standard(proto: "target_conf"),
    5: .standard(proto: "sat_per_byte"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_SendManyRequest) -> Bool {
    if self.addrToAmount != other.addrToAmount {return false}
    if self.targetConf != other.targetConf {return false}
    if self.satPerByte != other.satPerByte {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_SendManyResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txid"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_SendManyResponse) -> Bool {
    if self.txid != other.txid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_SendCoinsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addr"),
    2: .same(proto: "amount"),
    3: .standard(proto: "target_conf"),
    5: .standard(proto: "sat_per_byte"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_SendCoinsRequest) -> Bool {
    if self.addr != other.addr {return false}
    if self.amount != other.amount {return false}
    if self.targetConf != other.targetConf {return false}
    if self.satPerByte != other.satPerByte {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_SendCoinsResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txid"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_SendCoinsResponse) -> Bool {
    if self.txid != other.txid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NewAddressRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_NewAddressRequest) -> Bool {
    if self.type != other.type {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NewAddressRequest.AddressType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WITNESS_PUBKEY_HASH"),
    1: .same(proto: "NESTED_PUBKEY_HASH"),
    2: .same(proto: "PUBKEY_HASH"),
  ]
}

extension Lnrpc_NewWitnessAddressRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_NewWitnessAddressRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NewAddressResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_NewAddressResponse) -> Bool {
    if self.address != other.address {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_SignMessageRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msg"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_SignMessageRequest) -> Bool {
    if self.msg != other.msg {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_SignMessageResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_SignMessageResponse) -> Bool {
    if self.signature != other.signature {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_VerifyMessageRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msg"),
    2: .same(proto: "signature"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_VerifyMessageRequest) -> Bool {
    if self.msg != other.msg {return false}
    if self.signature != other.signature {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_VerifyMessageResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "valid"),
    2: .same(proto: "pubkey"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_VerifyMessageResponse) -> Bool {
    if self.valid != other.valid {return false}
    if self.pubkey != other.pubkey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ConnectPeerRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addr"),
    2: .same(proto: "perm"),
  ]

  fileprivate class _StorageClass {
    var _addr: Lnrpc_LightningAddress? = nil
    var _perm: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _addr = source._addr
      _perm = source._perm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_ConnectPeerRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._addr != other_storage._addr {return false}
        if _storage._perm != other_storage._perm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ConnectPeerResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "peer_id"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ConnectPeerResponse) -> Bool {
    if self.peerID != other.peerID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_DisconnectPeerRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pub_key"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_DisconnectPeerRequest) -> Bool {
    if self.pubKey != other.pubKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_DisconnectPeerResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_DisconnectPeerResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_HTLC: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "incoming"),
    2: .same(proto: "amount"),
    3: .same(proto: "hash_lock"),
    4: .same(proto: "expiration_height"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_HTLC) -> Bool {
    if self.incoming != other.incoming {return false}
    if self.amount != other.amount {return false}
    if self.hashLock != other.hashLock {return false}
    if self.expirationHeight != other.expirationHeight {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ActiveChannel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "active"),
    2: .same(proto: "remote_pubkey"),
    3: .same(proto: "channel_point"),
    4: .same(proto: "chan_id"),
    5: .same(proto: "capacity"),
    6: .same(proto: "local_balance"),
    7: .same(proto: "remote_balance"),
    8: .same(proto: "commit_fee"),
    9: .same(proto: "commit_weight"),
    10: .same(proto: "fee_per_kw"),
    11: .same(proto: "unsettled_balance"),
    12: .same(proto: "total_satoshis_sent"),
    13: .same(proto: "total_satoshis_received"),
    14: .same(proto: "num_updates"),
    15: .same(proto: "pending_htlcs"),
    16: .same(proto: "csv_delay"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ActiveChannel) -> Bool {
    if self.active != other.active {return false}
    if self.remotePubkey != other.remotePubkey {return false}
    if self.channelPoint != other.channelPoint {return false}
    if self.chanID != other.chanID {return false}
    if self.capacity != other.capacity {return false}
    if self.localBalance != other.localBalance {return false}
    if self.remoteBalance != other.remoteBalance {return false}
    if self.commitFee != other.commitFee {return false}
    if self.commitWeight != other.commitWeight {return false}
    if self.feePerKw != other.feePerKw {return false}
    if self.unsettledBalance != other.unsettledBalance {return false}
    if self.totalSatoshisSent != other.totalSatoshisSent {return false}
    if self.totalSatoshisReceived != other.totalSatoshisReceived {return false}
    if self.numUpdates != other.numUpdates {return false}
    if self.pendingHtlcs != other.pendingHtlcs {return false}
    if self.csvDelay != other.csvDelay {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ListChannelsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_ListChannelsRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ListChannelsResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .same(proto: "channels"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ListChannelsResponse) -> Bool {
    if self.channels != other.channels {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_Peer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pub_key"),
    2: .same(proto: "peer_id"),
    3: .same(proto: "address"),
    4: .same(proto: "bytes_sent"),
    5: .same(proto: "bytes_recv"),
    6: .same(proto: "sat_sent"),
    7: .same(proto: "sat_recv"),
    8: .same(proto: "inbound"),
    9: .same(proto: "ping_time"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_Peer) -> Bool {
    if self.pubKey != other.pubKey {return false}
    if self.peerID != other.peerID {return false}
    if self.address != other.address {return false}
    if self.bytesSent != other.bytesSent {return false}
    if self.bytesRecv != other.bytesRecv {return false}
    if self.satSent != other.satSent {return false}
    if self.satRecv != other.satRecv {return false}
    if self.inbound != other.inbound {return false}
    if self.pingTime != other.pingTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ListPeersRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_ListPeersRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ListPeersResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "peers"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ListPeersResponse) -> Bool {
    if self.peers != other.peers {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_GetInfoRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_GetInfoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_GetInfoResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity_pubkey"),
    2: .same(proto: "alias"),
    3: .same(proto: "num_pending_channels"),
    4: .same(proto: "num_active_channels"),
    5: .same(proto: "num_peers"),
    6: .same(proto: "block_height"),
    8: .same(proto: "block_hash"),
    9: .same(proto: "synced_to_chain"),
    10: .same(proto: "testnet"),
    11: .same(proto: "chains"),
    12: .same(proto: "uris"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_GetInfoResponse) -> Bool {
    if self.identityPubkey != other.identityPubkey {return false}
    if self.alias != other.alias {return false}
    if self.numPendingChannels != other.numPendingChannels {return false}
    if self.numActiveChannels != other.numActiveChannels {return false}
    if self.numPeers != other.numPeers {return false}
    if self.blockHeight != other.blockHeight {return false}
    if self.blockHash != other.blockHash {return false}
    if self.syncedToChain != other.syncedToChain {return false}
    if self.testnet != other.testnet {return false}
    if self.chains != other.chains {return false}
    if self.uris != other.uris {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ConfirmationUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_sha"),
    2: .standard(proto: "block_height"),
    3: .standard(proto: "num_confs_left"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ConfirmationUpdate) -> Bool {
    if self.blockSha != other.blockSha {return false}
    if self.blockHeight != other.blockHeight {return false}
    if self.numConfsLeft != other.numConfsLeft {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelOpenUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel_point"),
  ]

  fileprivate class _StorageClass {
    var _channelPoint: Lnrpc_ChannelPoint? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channelPoint = source._channelPoint
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelOpenUpdate) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channelPoint != other_storage._channelPoint {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelCloseUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "closing_txid"),
    2: .same(proto: "success"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelCloseUpdate) -> Bool {
    if self.closingTxid != other.closingTxid {return false}
    if self.success != other.success {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_CloseChannelRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_point"),
    2: .same(proto: "force"),
    3: .standard(proto: "target_conf"),
    4: .standard(proto: "sat_per_byte"),
  ]

  fileprivate class _StorageClass {
    var _channelPoint: Lnrpc_ChannelPoint? = nil
    var _force: Bool = false
    var _targetConf: Int32 = 0
    var _satPerByte: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channelPoint = source._channelPoint
      _force = source._force
      _targetConf = source._targetConf
      _satPerByte = source._satPerByte
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_CloseChannelRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channelPoint != other_storage._channelPoint {return false}
        if _storage._force != other_storage._force {return false}
        if _storage._targetConf != other_storage._targetConf {return false}
        if _storage._satPerByte != other_storage._satPerByte {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_CloseStatusUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "close_pending"),
    2: .same(proto: "confirmation"),
    3: .same(proto: "chan_close"),
  ]

  fileprivate class _StorageClass {
    var _update: Lnrpc_CloseStatusUpdate.OneOf_Update?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _update = source._update
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_CloseStatusUpdate) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._update != other_storage._update {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PendingUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txid"),
    2: .same(proto: "output_index"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_PendingUpdate) -> Bool {
    if self.txid != other.txid {return false}
    if self.outputIndex != other.outputIndex {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_OpenChannelRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target_peer_id"),
    2: .same(proto: "node_pubkey"),
    3: .same(proto: "node_pubkey_string"),
    4: .same(proto: "local_funding_amount"),
    5: .same(proto: "push_sat"),
    6: .standard(proto: "target_conf"),
    7: .standard(proto: "sat_per_byte"),
    8: .same(proto: "private"),
    9: .same(proto: "min_htlc_msat"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_OpenChannelRequest) -> Bool {
    if self.targetPeerID != other.targetPeerID {return false}
    if self.nodePubkey != other.nodePubkey {return false}
    if self.nodePubkeyString != other.nodePubkeyString {return false}
    if self.localFundingAmount != other.localFundingAmount {return false}
    if self.pushSat != other.pushSat {return false}
    if self.targetConf != other.targetConf {return false}
    if self.satPerByte != other.satPerByte {return false}
    if self.`private` != other.`private` {return false}
    if self.minHtlcMsat != other.minHtlcMsat {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_OpenStatusUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chan_pending"),
    2: .same(proto: "confirmation"),
    3: .same(proto: "chan_open"),
  ]

  fileprivate class _StorageClass {
    var _update: Lnrpc_OpenStatusUpdate.OneOf_Update?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _update = source._update
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_OpenStatusUpdate) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._update != other_storage._update {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PendingHTLC: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "incoming"),
    2: .same(proto: "amount"),
    3: .same(proto: "outpoint"),
    4: .same(proto: "maturity_height"),
    5: .same(proto: "blocks_til_maturity"),
    6: .same(proto: "stage"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_PendingHTLC) -> Bool {
    if self.incoming != other.incoming {return false}
    if self.amount != other.amount {return false}
    if self.outpoint != other.outpoint {return false}
    if self.maturityHeight != other.maturityHeight {return false}
    if self.blocksTilMaturity != other.blocksTilMaturity {return false}
    if self.stage != other.stage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PendingChannelsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_PendingChannelsRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PendingChannelsResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total_limbo_balance"),
    2: .same(proto: "pending_open_channels"),
    3: .same(proto: "pending_closing_channels"),
    4: .same(proto: "pending_force_closing_channels"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_PendingChannelsResponse) -> Bool {
    if self.totalLimboBalance != other.totalLimboBalance {return false}
    if self.pendingOpenChannels != other.pendingOpenChannels {return false}
    if self.pendingClosingChannels != other.pendingClosingChannels {return false}
    if self.pendingForceClosingChannels != other.pendingForceClosingChannels {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PendingChannelsResponse.PendingChannel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "remote_node_pub"),
    2: .same(proto: "channel_point"),
    3: .same(proto: "capacity"),
    4: .same(proto: "local_balance"),
    5: .same(proto: "remote_balance"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_PendingChannelsResponse.PendingChannel) -> Bool {
    if self.remoteNodePub != other.remoteNodePub {return false}
    if self.channelPoint != other.channelPoint {return false}
    if self.capacity != other.capacity {return false}
    if self.localBalance != other.localBalance {return false}
    if self.remoteBalance != other.remoteBalance {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PendingChannelsResponse.PendingOpenChannel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
    2: .same(proto: "confirmation_height"),
    4: .same(proto: "commit_fee"),
    5: .same(proto: "commit_weight"),
    6: .same(proto: "fee_per_kw"),
  ]

  fileprivate class _StorageClass {
    var _channel: Lnrpc_PendingChannelsResponse.PendingChannel? = nil
    var _confirmationHeight: UInt32 = 0
    var _commitFee: Int64 = 0
    var _commitWeight: Int64 = 0
    var _feePerKw: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channel = source._channel
      _confirmationHeight = source._confirmationHeight
      _commitFee = source._commitFee
      _commitWeight = source._commitWeight
      _feePerKw = source._feePerKw
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_PendingChannelsResponse.PendingOpenChannel) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channel != other_storage._channel {return false}
        if _storage._confirmationHeight != other_storage._confirmationHeight {return false}
        if _storage._commitFee != other_storage._commitFee {return false}
        if _storage._commitWeight != other_storage._commitWeight {return false}
        if _storage._feePerKw != other_storage._feePerKw {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PendingChannelsResponse.ClosedChannel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
    2: .same(proto: "closing_txid"),
  ]

  fileprivate class _StorageClass {
    var _channel: Lnrpc_PendingChannelsResponse.PendingChannel? = nil
    var _closingTxid: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channel = source._channel
      _closingTxid = source._closingTxid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_PendingChannelsResponse.ClosedChannel) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channel != other_storage._channel {return false}
        if _storage._closingTxid != other_storage._closingTxid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PendingChannelsResponse.ForceClosedChannel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
    2: .same(proto: "closing_txid"),
    3: .same(proto: "limbo_balance"),
    4: .same(proto: "maturity_height"),
    5: .same(proto: "blocks_til_maturity"),
    6: .same(proto: "recovered_balance"),
    8: .same(proto: "pending_htlcs"),
  ]

  fileprivate class _StorageClass {
    var _channel: Lnrpc_PendingChannelsResponse.PendingChannel? = nil
    var _closingTxid: String = String()
    var _limboBalance: Int64 = 0
    var _maturityHeight: UInt32 = 0
    var _blocksTilMaturity: Int32 = 0
    var _recoveredBalance: Int64 = 0
    var _pendingHtlcs: [Lnrpc_PendingHTLC] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channel = source._channel
      _closingTxid = source._closingTxid
      _limboBalance = source._limboBalance
      _maturityHeight = source._maturityHeight
      _blocksTilMaturity = source._blocksTilMaturity
      _recoveredBalance = source._recoveredBalance
      _pendingHtlcs = source._pendingHtlcs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_PendingChannelsResponse.ForceClosedChannel) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channel != other_storage._channel {return false}
        if _storage._closingTxid != other_storage._closingTxid {return false}
        if _storage._limboBalance != other_storage._limboBalance {return false}
        if _storage._maturityHeight != other_storage._maturityHeight {return false}
        if _storage._blocksTilMaturity != other_storage._blocksTilMaturity {return false}
        if _storage._recoveredBalance != other_storage._recoveredBalance {return false}
        if _storage._pendingHtlcs != other_storage._pendingHtlcs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_WalletBalanceRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "witness_only"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_WalletBalanceRequest) -> Bool {
    if self.witnessOnly != other.witnessOnly {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_WalletBalanceResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total_balance"),
    2: .same(proto: "confirmed_balance"),
    3: .same(proto: "unconfirmed_balance"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_WalletBalanceResponse) -> Bool {
    if self.totalBalance != other.totalBalance {return false}
    if self.confirmedBalance != other.confirmedBalance {return false}
    if self.unconfirmedBalance != other.unconfirmedBalance {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelBalanceRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelBalanceRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelBalanceResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "balance"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelBalanceResponse) -> Bool {
    if self.balance != other.balance {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_QueryRoutesRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "amt"),
    3: .standard(proto: "num_routes"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_QueryRoutesRequest) -> Bool {
    if self.pubKey != other.pubKey {return false}
    if self.amt != other.amt {return false}
    if self.numRoutes != other.numRoutes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_QueryRoutesResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "routes"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_QueryRoutesResponse) -> Bool {
    if self.routes != other.routes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_Hop: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chan_id"),
    2: .same(proto: "chan_capacity"),
    3: .same(proto: "amt_to_forward"),
    4: .same(proto: "fee"),
    5: .same(proto: "expiry"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_Hop) -> Bool {
    if self.chanID != other.chanID {return false}
    if self.chanCapacity != other.chanCapacity {return false}
    if self.amtToForward != other.amtToForward {return false}
    if self.fee != other.fee {return false}
    if self.expiry != other.expiry {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_Route: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total_time_lock"),
    2: .same(proto: "total_fees"),
    3: .same(proto: "total_amt"),
    4: .same(proto: "hops"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_Route) -> Bool {
    if self.totalTimeLock != other.totalTimeLock {return false}
    if self.totalFees != other.totalFees {return false}
    if self.totalAmt != other.totalAmt {return false}
    if self.hops != other.hops {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NodeInfoRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_NodeInfoRequest) -> Bool {
    if self.pubKey != other.pubKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NodeInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    2: .same(proto: "num_channels"),
    3: .same(proto: "total_capacity"),
  ]

  fileprivate class _StorageClass {
    var _node: Lnrpc_LightningNode? = nil
    var _numChannels: UInt32 = 0
    var _totalCapacity: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _node = source._node
      _numChannels = source._numChannels
      _totalCapacity = source._totalCapacity
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_NodeInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._node != other_storage._node {return false}
        if _storage._numChannels != other_storage._numChannels {return false}
        if _storage._totalCapacity != other_storage._totalCapacity {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_LightningNode: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "last_update"),
    2: .same(proto: "pub_key"),
    3: .same(proto: "alias"),
    4: .same(proto: "addresses"),
    5: .same(proto: "color"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_LightningNode) -> Bool {
    if self.lastUpdate != other.lastUpdate {return false}
    if self.pubKey != other.pubKey {return false}
    if self.alias != other.alias {return false}
    if self.addresses != other.addresses {return false}
    if self.color != other.color {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NodeAddress: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "network"),
    2: .same(proto: "addr"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_NodeAddress) -> Bool {
    if self.network != other.network {return false}
    if self.addr != other.addr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_RoutingPolicy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time_lock_delta"),
    2: .same(proto: "min_htlc"),
    3: .same(proto: "fee_base_msat"),
    4: .same(proto: "fee_rate_milli_msat"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_RoutingPolicy) -> Bool {
    if self.timeLockDelta != other.timeLockDelta {return false}
    if self.minHtlc != other.minHtlc {return false}
    if self.feeBaseMsat != other.feeBaseMsat {return false}
    if self.feeRateMilliMsat != other.feeRateMilliMsat {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelEdge: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel_id"),
    2: .same(proto: "chan_point"),
    3: .same(proto: "last_update"),
    4: .same(proto: "node1_pub"),
    5: .same(proto: "node2_pub"),
    6: .same(proto: "capacity"),
    7: .same(proto: "node1_policy"),
    8: .same(proto: "node2_policy"),
  ]

  fileprivate class _StorageClass {
    var _channelID: UInt64 = 0
    var _chanPoint: String = String()
    var _lastUpdate: UInt32 = 0
    var _node1Pub: String = String()
    var _node2Pub: String = String()
    var _capacity: Int64 = 0
    var _node1Policy: Lnrpc_RoutingPolicy? = nil
    var _node2Policy: Lnrpc_RoutingPolicy? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channelID = source._channelID
      _chanPoint = source._chanPoint
      _lastUpdate = source._lastUpdate
      _node1Pub = source._node1Pub
      _node2Pub = source._node2Pub
      _capacity = source._capacity
      _node1Policy = source._node1Policy
      _node2Policy = source._node2Policy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelEdge) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channelID != other_storage._channelID {return false}
        if _storage._chanPoint != other_storage._chanPoint {return false}
        if _storage._lastUpdate != other_storage._lastUpdate {return false}
        if _storage._node1Pub != other_storage._node1Pub {return false}
        if _storage._node2Pub != other_storage._node2Pub {return false}
        if _storage._capacity != other_storage._capacity {return false}
        if _storage._node1Policy != other_storage._node1Policy {return false}
        if _storage._node2Policy != other_storage._node2Policy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelGraphRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelGraphRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelGraph: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nodes"),
    2: .same(proto: "edges"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelGraph) -> Bool {
    if self.nodes != other.nodes {return false}
    if self.edges != other.edges {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChanInfoRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chan_id"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChanInfoRequest) -> Bool {
    if self.chanID != other.chanID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NetworkInfoRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_NetworkInfoRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NetworkInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "graph_diameter"),
    2: .same(proto: "avg_out_degree"),
    3: .same(proto: "max_out_degree"),
    4: .same(proto: "num_nodes"),
    5: .same(proto: "num_channels"),
    6: .same(proto: "total_network_capacity"),
    7: .same(proto: "avg_channel_size"),
    8: .same(proto: "min_channel_size"),
    9: .same(proto: "max_channel_size"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_NetworkInfo) -> Bool {
    if self.graphDiameter != other.graphDiameter {return false}
    if self.avgOutDegree != other.avgOutDegree {return false}
    if self.maxOutDegree != other.maxOutDegree {return false}
    if self.numNodes != other.numNodes {return false}
    if self.numChannels != other.numChannels {return false}
    if self.totalNetworkCapacity != other.totalNetworkCapacity {return false}
    if self.avgChannelSize != other.avgChannelSize {return false}
    if self.minChannelSize != other.minChannelSize {return false}
    if self.maxChannelSize != other.maxChannelSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_StopRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_StopRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_StopResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_StopResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_GraphTopologySubscription: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_GraphTopologySubscription) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_GraphTopologyUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_updates"),
    2: .standard(proto: "channel_updates"),
    3: .standard(proto: "closed_chans"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_GraphTopologyUpdate) -> Bool {
    if self.nodeUpdates != other.nodeUpdates {return false}
    if self.channelUpdates != other.channelUpdates {return false}
    if self.closedChans != other.closedChans {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_NodeUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addresses"),
    2: .standard(proto: "identity_key"),
    3: .standard(proto: "global_features"),
    4: .same(proto: "alias"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_NodeUpdate) -> Bool {
    if self.addresses != other.addresses {return false}
    if self.identityKey != other.identityKey {return false}
    if self.globalFeatures != other.globalFeatures {return false}
    if self.alias != other.alias {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelEdgeUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chan_id"),
    2: .standard(proto: "chan_point"),
    3: .same(proto: "capacity"),
    4: .standard(proto: "routing_policy"),
    5: .standard(proto: "advertising_node"),
    6: .standard(proto: "connecting_node"),
  ]

  fileprivate class _StorageClass {
    var _chanID: UInt64 = 0
    var _chanPoint: Lnrpc_ChannelPoint? = nil
    var _capacity: Int64 = 0
    var _routingPolicy: Lnrpc_RoutingPolicy? = nil
    var _advertisingNode: String = String()
    var _connectingNode: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chanID = source._chanID
      _chanPoint = source._chanPoint
      _capacity = source._capacity
      _routingPolicy = source._routingPolicy
      _advertisingNode = source._advertisingNode
      _connectingNode = source._connectingNode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelEdgeUpdate) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._chanID != other_storage._chanID {return false}
        if _storage._chanPoint != other_storage._chanPoint {return false}
        if _storage._capacity != other_storage._capacity {return false}
        if _storage._routingPolicy != other_storage._routingPolicy {return false}
        if _storage._advertisingNode != other_storage._advertisingNode {return false}
        if _storage._connectingNode != other_storage._connectingNode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ClosedChannelUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chan_id"),
    2: .same(proto: "capacity"),
    3: .standard(proto: "closed_height"),
    4: .standard(proto: "chan_point"),
  ]

  fileprivate class _StorageClass {
    var _chanID: UInt64 = 0
    var _capacity: Int64 = 0
    var _closedHeight: UInt32 = 0
    var _chanPoint: Lnrpc_ChannelPoint? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chanID = source._chanID
      _capacity = source._capacity
      _closedHeight = source._closedHeight
      _chanPoint = source._chanPoint
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_ClosedChannelUpdate) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._chanID != other_storage._chanID {return false}
        if _storage._capacity != other_storage._capacity {return false}
        if _storage._closedHeight != other_storage._closedHeight {return false}
        if _storage._chanPoint != other_storage._chanPoint {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_Invoice: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "memo"),
    2: .same(proto: "receipt"),
    3: .same(proto: "r_preimage"),
    4: .same(proto: "r_hash"),
    5: .same(proto: "value"),
    6: .same(proto: "settled"),
    7: .same(proto: "creation_date"),
    8: .same(proto: "settle_date"),
    9: .same(proto: "payment_request"),
    10: .same(proto: "description_hash"),
    11: .same(proto: "expiry"),
    12: .same(proto: "fallback_addr"),
    13: .same(proto: "cltv_expiry"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_Invoice) -> Bool {
    if self.memo != other.memo {return false}
    if self.receipt != other.receipt {return false}
    if self.rPreimage != other.rPreimage {return false}
    if self.rHash != other.rHash {return false}
    if self.value != other.value {return false}
    if self.settled != other.settled {return false}
    if self.creationDate != other.creationDate {return false}
    if self.settleDate != other.settleDate {return false}
    if self.paymentRequest != other.paymentRequest {return false}
    if self.descriptionHash != other.descriptionHash {return false}
    if self.expiry != other.expiry {return false}
    if self.fallbackAddr != other.fallbackAddr {return false}
    if self.cltvExpiry != other.cltvExpiry {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_AddInvoiceResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "r_hash"),
    2: .same(proto: "payment_request"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_AddInvoiceResponse) -> Bool {
    if self.rHash != other.rHash {return false}
    if self.paymentRequest != other.paymentRequest {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PaymentHash: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "r_hash_str"),
    2: .same(proto: "r_hash"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_PaymentHash) -> Bool {
    if self.rHashStr != other.rHashStr {return false}
    if self.rHash != other.rHash {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ListInvoiceRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pending_only"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ListInvoiceRequest) -> Bool {
    if self.pendingOnly != other.pendingOnly {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ListInvoiceResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "invoices"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ListInvoiceResponse) -> Bool {
    if self.invoices != other.invoices {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_InvoiceSubscription: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_InvoiceSubscription) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_Payment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payment_hash"),
    2: .same(proto: "value"),
    3: .same(proto: "creation_date"),
    4: .same(proto: "path"),
    5: .same(proto: "fee"),
    6: .same(proto: "payment_preimage"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_Payment) -> Bool {
    if self.paymentHash != other.paymentHash {return false}
    if self.value != other.value {return false}
    if self.creationDate != other.creationDate {return false}
    if self.path != other.path {return false}
    if self.fee != other.fee {return false}
    if self.paymentPreimage != other.paymentPreimage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ListPaymentsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_ListPaymentsRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ListPaymentsResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payments"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ListPaymentsResponse) -> Bool {
    if self.payments != other.payments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_DeleteAllPaymentsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_DeleteAllPaymentsRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_DeleteAllPaymentsResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_DeleteAllPaymentsResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_DebugLevelRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "show"),
    2: .standard(proto: "level_spec"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_DebugLevelRequest) -> Bool {
    if self.show != other.show {return false}
    if self.levelSpec != other.levelSpec {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_DebugLevelResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sub_systems"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_DebugLevelResponse) -> Bool {
    if self.subSystems != other.subSystems {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PayReqString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pay_req"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_PayReqString) -> Bool {
    if self.payReq != other.payReq {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PayReq: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "destination"),
    2: .same(proto: "payment_hash"),
    3: .same(proto: "num_satoshis"),
    4: .same(proto: "timestamp"),
    5: .same(proto: "expiry"),
    6: .same(proto: "description"),
    7: .same(proto: "description_hash"),
    8: .same(proto: "fallback_addr"),
    9: .same(proto: "cltv_expiry"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_PayReq) -> Bool {
    if self.destination != other.destination {return false}
    if self.paymentHash != other.paymentHash {return false}
    if self.numSatoshis != other.numSatoshis {return false}
    if self.timestamp != other.timestamp {return false}
    if self.expiry != other.expiry {return false}
    if self.description_p != other.description_p {return false}
    if self.descriptionHash != other.descriptionHash {return false}
    if self.fallbackAddr != other.fallbackAddr {return false}
    if self.cltvExpiry != other.cltvExpiry {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_FeeReportRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_FeeReportRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_ChannelFeeReport: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "chan_point", json: "channel_point"),
    2: .same(proto: "base_fee_msat"),
    3: .same(proto: "fee_per_mil"),
    4: .same(proto: "fee_rate"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_ChannelFeeReport) -> Bool {
    if self.chanPoint != other.chanPoint {return false}
    if self.baseFeeMsat != other.baseFeeMsat {return false}
    if self.feePerMil != other.feePerMil {return false}
    if self.feeRate != other.feeRate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_FeeReportResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel_fees"),
  ]

  func _protobuf_generated_isEqualTo(other: Lnrpc_FeeReportResponse) -> Bool {
    if self.channelFees != other.channelFees {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PolicyUpdateRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "global"),
    2: .same(proto: "chan_point"),
    3: .same(proto: "base_fee_msat"),
    4: .same(proto: "fee_rate"),
    5: .same(proto: "time_lock_delta"),
  ]

  fileprivate class _StorageClass {
    var _scope: Lnrpc_PolicyUpdateRequest.OneOf_Scope?
    var _baseFeeMsat: Int64 = 0
    var _feeRate: Double = 0
    var _timeLockDelta: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scope = source._scope
      _baseFeeMsat = source._baseFeeMsat
      _feeRate = source._feeRate
      _timeLockDelta = source._timeLockDelta
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lnrpc_PolicyUpdateRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._scope != other_storage._scope {return false}
        if _storage._baseFeeMsat != other_storage._baseFeeMsat {return false}
        if _storage._feeRate != other_storage._feeRate {return false}
        if _storage._timeLockDelta != other_storage._timeLockDelta {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lnrpc_PolicyUpdateResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Lnrpc_PolicyUpdateResponse) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
